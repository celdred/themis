

 {% if formdim >= 1 %}
 {% for ci in range(space1.ncomp) %}
#define s1_{{ci}}_indices [d1 + {{ space1.ndofs }} * (nz + {{ space1.nbasis_z[ci]  }} * (ny + {{ space1.nbasis_y[ci]  }} * nx))]
#define s1_{{ci}}_indices_off [ci1off + d1 + {{ space1.ndofs }} * (nz + {{  space1.nbasis_z[ci]  }} * (ny + {{ space1.nbasis_y[ci]  }} * nx))]
 {% endfor %}
 {% endif %}
  {% if formdim == 2 %}
 {% for ci in range(space2.ncomp) %}
#define s2_{{ci}}_indices [d2 + {{ space2.ndofs }} * (mz + {{  space2.nbasis_z[ci]  }} * (my + {{ space2.nbasis_y[ci]  }} * mx))]
#define s2_{{ci}}_indices_off [ci2off + d2 + {{ space2.ndofs }} * (mz + {{  space2.nbasis_z[ci]  }} * (my + {{ space2.nbasis_y[ci]  }} * mx))]
 {% endfor %}
{% endif %}


{%macro SETVALS(ci) -%}
 #define kk (k * offset_mult1_z_{{ ci }}[bi_1_z_{{ci}}][nz] + offsets1_z_{{ ci }}[bi_1_z_{{ci}}][nz])
 #define jj (j * offset_mult1_y_{{ ci }}[bi_1_y_{{ci}}][ny] + offsets1_y_{{ ci }}[bi_1_y_{{ci}}][ny])
 #define ii (i * offset_mult1_x_{{ ci }}[bi_1_x_{{ci}}][nx] + offsets1_x_{{ ci }}[bi_1_x_{{ci}}][nx])
for (nx=0;nx<{{ space1.nbasis_x[ci] }};nx++) {
for (ny=0;ny<{{ space1.nbasis_y[ci] }};ny++) {
for (nz=0;nz<{{ space1.nbasis_z[ci] }};nz++) {
for (d1=0;d1<{{ space1.ndofs }};d1++) {
{% if ndim == 1 %}
data_formvec_{{ ci }}[ii][d1] += vals_{{ ci }} s1_{{ci}}_indices;
{% endif %}
{% if ndim == 2 %}
data_formvec_{{ ci }}[jj][ii][d1] += vals_{{ ci }} s1_{{ci}}_indices;
{% endif %}
{% if ndim == 3 %}
data_formvec_{{ ci }}[kk][jj][ii][d1] += vals_{{ ci }} s1_{{ci}}_indices;
{% endif %}
}}}}
#undef ii
#undef jj
#undef kk
{% endmacro %}

#include <petsc.h>
#include "math.h"
#include <stdio.h>

//Actual kernel snippet
		{{ kernelstr }}

{% if formdim == 2 %}

PetscErrorCode assemble(DM da {{ submatlist }}  {{ space1.dalist }}  {{ space2.dalist }} {{ fieldargs }} {{ constantargs }})
{% endif %}
 {% if formdim == 1 %}
PetscErrorCode assemble(DM da {{ subveclist }} {{ space1.dalist }} {{ fieldargs }} {{ constantargs }})
{% endif %}
 {% if formdim == 0 %}
PetscScalar assemble(DM da {{ fieldargs }} {{ constantargs }})
{% endif %}

{

 {% if formdim == 2 %}
 PetscScalar vals[{{ space1.nbasis_total }} * {{ space1.ndofs }}][{{ space2.nbasis_total }} * {{ space2.ndofs }}] = { {0.,},};
 {% for ci1 in range(space1.ncomp) %}
 {% for ci2 in range(space2.ncomp) %}
  PetscScalar	vals_{{ ci1 }}_{{ ci2 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}][{{ space2.nbasis[ci2] }} * {{ space2.ndofs }}] = { {0.,},};
 {% endfor %}
 {% endfor %}
  {% for ci2 in range(space2.ncomp) %}
   PetscInt     cols_{{ ci2 }}[{{ space2.nbasis[ci2] }} * {{ space2.ndofs }}];
    {% endfor %}
    {% for ci1 in range(space1.ncomp) %}
   PetscInt     rows_{{ ci1 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}];
 {% endfor %}
 {% endif %}

 {% if formdim == 1 %}
 PetscScalar vals[{{ space1.nbasis_total }} * {{ space1.ndofs }}] = {0.,};
 {% for ci1 in range(space1.ncomp) %}
 PetscScalar	vals_{{ ci1 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}]= {0.,};
 {% if ndim == 1 %}
 PetscScalar **data_formvec_{{ ci1 }};
      {% endif %}
 {% if ndim == 2 %}
 PetscScalar ***data_formvec_{{ ci1 }};
      {% endif %}
 {% if ndim == 3 %}
 PetscScalar ****data_formvec_{{ ci1 }};
      {% endif %}
  {% endfor %}
 {% endif %}


 {% if formdim == 0 %}
 PetscScalar	vals[1] = {0.0,};
 PetscScalar formsum[1] = {0.0,};
 {% endif %}

  PetscErrorCode ierr;
  PetscInt ci1off,ci2off;
  PetscInt i,j,k; //spatial loop indices
   PetscInt lx,ly,lz; //field indices
   PetscInt nx,ny,nz; //space1 indices
   PetscInt mx,my,mz; //space2 indices
   PetscInt d,d1,d2; //dof indices
  PetscInt xs,xm,ys,ym,zs,zm,xmax,ymax,zmax;
   {% if formdim >= 1 %}
  {% for ci1 in range(space1.ncomp) %}
  PetscInt x1s_{{ ci1 }},x1m_{{ ci1 }},y1s_{{ ci1 }},y1m_{{ ci1 }},z1s_{{ ci1 }},z1m_{{ ci1 }};
    {% endfor %}
   {% endif %}
 {% if formdim == 2 %}
  {% for ci2 in range(space2.ncomp) %}
  PetscInt x2s_{{ ci2 }},x2m_{{ ci2 }},y2s_{{ ci2 }},y2m_{{ ci2 }},z2s_{{ ci2 }},z2m_{{ ci2 }};
   {% endfor %}
 {% endif %}

 {% if formdim == 2 %}
  {% for ci2 in range(space2.ncomp) %}
const   PetscInt offsets2_x_{{ ci2 }}[{{ space2.nblocks_x[ci2] }}][{{ space2.nbasis_x[ci2] }}] = {{ space2.offsets_x[ci2] }};
const   PetscInt offsets2_y_{{ ci2 }}[{{ space2.nblocks_y[ci2] }}][{{ space2.nbasis_y[ci2] }}] = {{ space2.offsets_y[ci2] }};
const   PetscInt offsets2_z_{{ ci2 }}[{{ space2.nblocks_z[ci2] }}][{{ space2.nbasis_z[ci2] }}] = {{ space2.offsets_z[ci2] }};
const   PetscInt offset_mult2_x_{{ ci2 }}[{{ space2.nblocks_x[ci2] }}][{{ space2.nbasis_x[ci2] }}] = {{ space2.offset_mult_x[ci2] }};
const   PetscInt offset_mult2_y_{{ ci2 }}[{{ space2.nblocks_y[ci2] }}][{{ space2.nbasis_y[ci2] }}] = {{ space2.offset_mult_y[ci2] }};
const   PetscInt offset_mult2_z_{{ ci2 }}[{{ space2.nblocks_z[ci2] }}][{{ space2.nbasis_z[ci2] }}] = {{ space2.offset_mult_z[ci2] }};
   PetscInt bi_2_x_{{ ci2 }} = -1000;
   PetscInt bi_2_y_{{ ci2 }} = -1000;
   PetscInt bi_2_z_{{ ci2 }} = -1000;
  {% endfor %}
  {% endif %}
 {% if formdim >= 1 %}
 {% for ci1 in range(space1.ncomp) %}
const   PetscInt offsets1_x_{{ ci1 }}[{{ space1.nblocks_x[ci1] }}][{{ space1.nbasis_x[ci1] }}] = {{ space1.offsets_x[ci1] }};
const   PetscInt offsets1_y_{{ ci1 }}[{{ space1.nblocks_y[ci1] }}][{{ space1.nbasis_y[ci1] }}] = {{ space1.offsets_y[ci1] }};
const   PetscInt offsets1_z_{{ ci1 }}[{{ space1.nblocks_z[ci1] }}][{{ space1.nbasis_z[ci1] }}] = {{ space1.offsets_z[ci1] }};
const   PetscInt offset_mult1_x_{{ ci1 }}[{{ space1.nblocks_x[ci1] }}][{{ space1.nbasis_x[ci1] }}] = {{ space1.offset_mult_x[ci1] }};
const   PetscInt offset_mult1_y_{{ ci1 }}[{{ space1.nblocks_y[ci1] }}][{{ space1.nbasis_y[ci1] }}] = {{ space1.offset_mult_y[ci1] }};
const   PetscInt offset_mult1_z_{{ ci1 }}[{{ space1.nblocks_z[ci1] }}][{{ space1.nbasis_z[ci1] }}] = {{ space1.offset_mult_z[ci1] }};
   PetscInt bi_1_x_{{ ci1 }} = -1000;
   PetscInt bi_1_y_{{ ci1 }} = -1000;
   PetscInt bi_1_z_{{ ci1 }} = -1000;
  {% endfor %}
  {% endif %}

 {% for field in fieldlist %}
 PetscInt {{field.name}}_offset;
 PetscScalar	{{field.name}}_vals[{{ field.nbasis_total }} * {{ field.ndofs }}] = { 0.,};
 {% for k in range(field.ncomp) %}
const   PetscInt {{field.name}}_{{k}}_offsets_x[{{ field.nblocks_x[k] }}][{{ field.nbasis_x[k] }}] = {{ field.offsets_x[k] }};
const   PetscInt {{field.name}}_{{k}}_offsets_y[{{ field.nblocks_y[k] }}][{{ field.nbasis_y[k] }}] = {{ field.offsets_y[k] }};
const   PetscInt {{field.name}}_{{k}}_offsets_z[{{ field.nblocks_z[k] }}][{{ field.nbasis_z[k] }}] = {{ field.offsets_z[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_x[{{ field.nblocks_x[k] }}][{{ field.nbasis_x[k] }}] = {{ field.offset_mult_x[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_y[{{ field.nblocks_y[k] }}][{{ field.nbasis_y[k] }}] = {{ field.offset_mult_y[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_z[{{ field.nblocks_z[k] }}][{{ field.nbasis_z[k] }}] = {{ field.offset_mult_z[k] }};
   PetscInt bi_{{field.name}}_x_{{k}} = -1000;
   PetscInt bi_{{field.name}}_y_{{k}} = -1000;
   PetscInt bi_{{field.name}}_z_{{k}} = -1000;

#define {{field.name}}_{{k}}_indices [{{field.name}}_offset + d + {{ field.ndofs }} * (lz + {{  field.nbasis_z[k]  }} * (ly + {{ field.nbasis_y[k]  }} * lx))]

 {% if ndim == 1 %}
  PetscScalar **data_{{field.name}}_{{k}};
      {% endif %}
 {% if ndim == 2 %}
  PetscScalar ***data_{{field.name}}_{{k}};
      {% endif %}
 {% if ndim == 3 %}
  PetscScalar ****data_{{field.name}}_{{k}};
      {% endif %}
    {% endfor %}
  {% endfor %}

 {% for tabulation in tabulations %}
 const   PetscScalar {{ tabulation.name }}[{{ tabulation.nblocks }}][{{ tabulation.npts }}][{{ tabulation.nbasis }}] = {{ tabulation.values }};
 {% if tabulation.shiftaxis == 0 %}
 PetscInt bi_{{ tabulation.name }}_x_0 = -1000;
     {% endif %}
 {% if tabulation.shiftaxis == 1 %}
 PetscInt bi_{{ tabulation.name }}_y_0 = -1000;
     {% endif %}
      {% if tabulation.shiftaxis == 2 %}
 PetscInt bi_{{ tabulation.name }}_z_0 = -1000;
     {% endif %}
 {% endfor %}

 {% for field in fieldlist %}
      {% for k in range(field.ncomp) %}
  ierr = DMDAVecGetArrayDOFRead(da_{{field.name}}_{{k}},{{field.name}}_{{k}},&data_{{field.name}}_{{k}});CHKERRQ(ierr);
      {% endfor %}
  {% endfor %}

  //Get the data out of Vec formvec
    {% if formdim == 1 %}
     {% for ci1 in range(space1.ncomp) %}
    ierr = DMDAVecGetArrayDOF(da_s1_{{ ci1 }},formvec_{{ ci1 }},&data_formvec_{{ ci1 }});CHKERRQ(ierr);
      {% endfor %}
    {% endif %}


	//get DMDA ranges
   {% if formdim >= 1 %}
       {% for ci1 in range(space1.ncomp) %}
  ierr = DMDAGetGhostCorners(da_s1_{{ ci1 }},&x1s_{{ ci1 }},&y1s_{{ ci1 }},&z1s_{{ ci1 }},&x1m_{{ ci1 }},&y1m_{{ ci1 }},&z1m_{{ ci1 }});CHKERRQ(ierr);
      {% endfor %}
    {% endif %}
    {% if formdim >= 2 %}
         {% for ci2 in range(space2.ncomp) %}
  ierr = DMDAGetGhostCorners(da_s2_{{ ci2 }},&x2s_{{ ci2 }},&y2s_{{ ci2 }},&z2s_{{ ci2 }},&x2m_{{ ci2 }},&y2m_{{ ci2 }},&z2m_{{ ci2 }});CHKERRQ(ierr);
       {% endfor %}
      {% endif %}
  ierr = DMDAGetCorners(da,&xs,&ys,&zs,&xm,&ym,&zm);CHKERRQ(ierr);
   ierr = DMDAGetInfo(da,0,&xmax,&ymax,&zmax,0,0,0,0,0,0,0,0,0);CHKERRQ(ierr);

 {% from 'setblocks.template' import SET_PERIODIC_TABULATIONS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_X_TABULATIONS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Y_TABULATIONS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Z_TABULATIONS with context %}
 {% from 'setblocks.template' import SET_PERIODIC_SPACES with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_X_SPACES with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Y_SPACES with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Z_SPACES with context %}
 {% from 'setblocks.template' import SET_PERIODIC_FIELDS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_X_FIELDS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Y_FIELDS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Z_FIELDS with context %}

{{ SET_PERIODIC_TABULATIONS() }}
{{ SET_PERIODIC_SPACES() }}
{{ SET_PERIODIC_FIELDS() }}
for (k=zs; k<zs+zm; k++) {
{{ SET_NONPERIODIC_Z_TABULATIONS() }}
{{ SET_NONPERIODIC_Z_SPACES() }}
{{ SET_NONPERIODIC_Z_FIELDS() }}
   for (j=ys; j<ys+ym; j++) {
     {{ SET_NONPERIODIC_Y_TABULATIONS() }}
     {{ SET_NONPERIODIC_Y_SPACES() }}
     {{ SET_NONPERIODIC_Y_FIELDS() }}
      for (i=xs; i<xs+xm; i++) {
	      {{ SET_NONPERIODIC_X_TABULATIONS() }}
	      {{ SET_NONPERIODIC_X_SPACES() }}
	      {{ SET_NONPERIODIC_X_FIELDS() }}

		 {% if formdim == 2 %}
       {% for ci1 in range(space1.ncomp) %}
       #define icoord (i * offset_mult1_x_{{ ci1 }}[bi_1_x_{{ci1}}][nx] + offsets1_x_{{ ci1 }}[bi_1_x_{{ci1}}][nx] - x1s_{{ ci1 }})
       #define jcoord (j * offset_mult1_y_{{ ci1 }}[bi_1_y_{{ci1}}][ny] + offsets1_y_{{ ci1 }}[bi_1_y_{{ci1}}][ny] - y1s_{{ ci1 }})
       #define kcoord (k * offset_mult1_z_{{ ci1 }}[bi_1_z_{{ci1}}][nz] + offsets1_z_{{ ci1 }}[bi_1_z_{{ci1}}][nz] - z1s_{{ ci1 }})
		for (nx=0;nx<{{ space1.nbasis_x[ci1] }};nx++) {
		for (ny=0;ny<{{ space1.nbasis_y[ci1] }};ny++) {
		for (nz=0;nz<{{ space1.nbasis_z[ci1] }};nz++) {
        for (d1=0;d1<{{ space1.ndofs }};d1++) {
			rows_{{ ci1 }} s1_{{ci1}}_indices =  d1 + {{ space1.ndofs }} * (icoord + x1m_{{ ci1 }}*(jcoord + y1m_{{ ci1 }}*kcoord));
		}}}}
        #undef icoord
		#undef jcoord
		#undef kcoord
      {% endfor %}

       {% for ci2 in range(space2.ncomp) %}
       #define icoord (i * offset_mult2_x_{{ ci2 }}[bi_2_x_{{ci2}}][mx] + offsets2_x_{{ ci2 }}[bi_2_x_{{ci2}}][mx] - x2s_{{ ci2 }})
       #define jcoord (j * offset_mult2_y_{{ ci2 }}[bi_2_y_{{ci2}}][my] + offsets2_y_{{ ci2 }}[bi_2_y_{{ci2}}][my] - y2s_{{ ci2 }})
       #define kcoord (k * offset_mult2_z_{{ ci2 }}[bi_2_z_{{ci2}}][mz] + offsets2_z_{{ ci2 }}[bi_2_z_{{ci2}}][mz] - z2s_{{ ci2 }})
		for (mx=0;mx<{{ space2.nbasis_x[ci2] }};mx++) {
		for (my=0;my<{{ space2.nbasis_y[ci2] }};my++) {
		for (mz=0;mz<{{ space2.nbasis_z[ci2] }};mz++) {
        for (d2=0;d2<{{ space2.ndofs }};d2++) {
			cols_{{ ci2 }} s2_{{ci2}}_indices =  d2 + {{ space2.ndofs }} * (icoord + x2m_{{ ci2 }}*(jcoord + y2m_{{ ci2 }}*kcoord));
		}}}}
        #undef icoord
		#undef jcoord
		#undef kcoord
	 {% endfor %}
		{% endif %}

		//extract element dofs from local dofs
		 {% for field in fieldlist %}
		 		{{field.name}}_offset = 0;
		{% for k in range(field.ncomp) %}
		{%set offset_mult = field.name~'_'~k ~'_offset_mult' %}
		{%set offset = field.name~'_'~k ~'_offsets' %}
		#define ii (i*{{ offset_mult }}_x[bi_{{field.name}}_x_{{k}}][lx] + {{ offset }}_x[bi_{{field.name}}_x_{{k}}][lx])
		#define jj (j*{{ offset_mult }}_y[bi_{{field.name}}_y_{{k}}][ly] + {{ offset }}_y[bi_{{field.name}}_y_{{k}}][ly])
		#define kk (k*{{ offset_mult }}_z[bi_{{field.name}}_z_{{k}}][lz] + {{ offset }}_z[bi_{{field.name}}_z_{{k}}][lz])
		for (lx=0;lx<{{ field.nbasis_x[k] }};lx++){
		for (ly=0;ly<{{ field.nbasis_y[k] }};ly++){
		for (lz=0;lz<{{ field.nbasis_z[k] }};lz++){
		for (d=0;d<{{ field.ndofs }};d++){
		{% if ndim == 1 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [ii][d];
		{% endif %}
		{% if ndim == 2 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [jj][ii][d];
		{% endif %}
		{% if ndim == 3 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [kk][jj][ii][d];
		{% endif %}
		}}}}
		#undef ii
		#undef jj
		#undef kk
		{{field.name}}_offset = {{field.name}}_offset + {{ field.nbasis[k] }} * {{ field.ndofs }};
		{% endfor %}
		{% endfor %}

		//compute the element tensor

		    {% if formdim == 2 %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ space1.nbasis_total }} * {{ space1.ndofs }}][{{ space2.nbasis_total }} * {{ space2.ndofs }}])); CHKERRQ(ierr);
				{% endif %}
		    {% if formdim == 1 %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ space1.nbasis_total }} * {{ space1.ndofs }}])); CHKERRQ(ierr);
				{% endif %}
		    {% if formdim == 0 %}
		    vals[0] = 0.0;
				{% endif %}

				{% if not kernelstr == '' %}
		{{kernelname}}(vals
            {{ kernelargs }}
				 {% for tabulation in tabulations %}
				  {% if tabulation.shiftaxis == 0 %}
				 ,{{tabulation.name}}[bi_{{ tabulation.name }}_x_0]
			      	{% endif %}
				  {% if tabulation.shiftaxis == 1 %}
				 ,{{tabulation.name}}[bi_{{ tabulation.name }}_y_0]
			      	{% endif %}
				  {% if tabulation.shiftaxis == 2 %}
				 ,{{tabulation.name}}[bi_{{ tabulation.name }}_z_0]
			      	{% endif %}
				{% endfor %}
			);
			  				{% endif %}

			//unsplat vals
	 {% if formdim == 2 %}
	   ci1off = 0;
       {% for ci1 in range(space1.ncomp) %}
       ci2off = 0;
       {% for ci2 in range(space2.ncomp) %}
        for (nx=0;nx<{{ space1.nbasis_x[ci1] }};nx++) {
		for (ny=0;ny<{{ space1.nbasis_y[ci1] }};ny++) {
		for (nz=0;nz<{{ space1.nbasis_z[ci1] }};nz++) {
        for (d1=0;d1<{{ space1.ndofs }};d1++) {
		for (mx=0;mx<{{ space2.nbasis_x[ci2] }};mx++) {
		for (my=0;my<{{ space2.nbasis_y[ci2] }};my++) {
		for (mz=0;mz<{{ space2.nbasis_z[ci2] }};mz++) {
        for (d2=0;d2<{{ space2.ndofs }};d2++) {
       vals_{{ ci1 }}_{{ ci2 }} s1_{{ci1}}_indices s2_{{ci2}}_indices = vals s1_{{ci1}}_indices_off s2_{{ci2}}_indices_off;
   }}}}}}}}
   ci2off = ci2off + {{ space2.nbasis[ci2] }} * {{ space2.ndofs }};
				{% endfor %}
			ci1off = ci1off + {{ space1.nbasis[ci1] }} * {{ space1.ndofs }};
				{% endfor %}
				{% endif %}

					    {% if formdim == 1 %}
					    ci1off = 0;
		       {% for ci1 in range(space1.ncomp) %}
        for (nx=0;nx<{{ space1.nbasis_x[ci1] }};nx++) {
		for (ny=0;ny<{{ space1.nbasis_y[ci1] }};ny++) {
		for (nz=0;nz<{{ space1.nbasis_z[ci1] }};nz++) {
        for (d1=0;d1<{{ space1.ndofs }};d1++) {
			vals_{{ ci1 }} s1_{{ci1}}_indices = vals s1_{{ci1}}_indices_off;
		}}}}
						ci1off = ci1off + {{ space1.nbasis[ci1] }} * {{ space1.ndofs }};
				{% endfor %}
				{% endif %}

		//Put the element tensor into the local tensor
		{% if formdim == 2 %}
		       {% for ci1 in range(space1.ncomp) %}
       {% for ci2 in range(space2.ncomp) %}
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ space1.nbasis[ci1] }} * {{ space1.ndofs }},rows_{{ ci1 }},{{ space2.nbasis[ci2] }} * {{ space2.ndofs }},cols_{{ ci2 }},*vals_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
			 {% endfor %}
	 {% endfor %}
		{% endif %}

		{% if formdim == 1 %}
		 {% for ci1 in range(space1.ncomp) %}
		{{ SETVALS(ci1) }}
		{% endfor %}
		{% endif %}

		{% if formdim == 0 %}
		formsum[0] = formsum[0] + vals[0];
		{% endif %}

       }}}

//restore fields arrays and data
 {% for field in fieldlist %}
      {% for k in range(field.ncomp) %}
    ierr = DMDAVecRestoreArrayDOFRead(da_{{field.name}}_{{k}},{{field.name}}_{{k}},&data_{{field.name}}_{{k}});CHKERRQ(ierr);
      {% endfor %}
   {% endfor %}

 {% if formdim == 1 %}
//restore data in Vec v
		 {% for ci1 in range(space1.ncomp) %}
    ierr = DMDAVecRestoreArrayDOF(da_s1_{{ ci1 }},formvec_{{ ci1 }},&data_formvec_{{ ci1 }});CHKERRQ(ierr);
    		{% endfor %}
{% endif %}

  {% if formdim == 0 %}
return formsum[0];
{% endif %}

  PetscFunctionReturn(0);
}
