
//Key: we define 1 = + (left) and 2 = - (right)

{% if facet_direc == 0 %}
#define i1cell (i - 1)
{% else %}
#define i1cell (i)
{% endif %}
{% if facet_direc == 1 %}
#define j1cell (j - 1)
{% else %}
#define j1cell (j)
{% endif %}
{% if facet_direc == 2 %}
#define k1cell (k - 1)
{% else %}
#define k1cell (k)
{% endif %}

#define i2cell (i)
#define j2cell (j)
#define k2cell (k)


 {% if formdim >= 1 %}
 {% for ci in range(space1.ncomp) %}
#define s1_{{ci}}_indices [d1 + {{ space1.ndofs }} * (nz + {{  space1.nbasis_z[ci]  }} * (ny + {{ space1.nbasis_y[ci]  }} * nx))]
#define s1_{{ci}}_indices_off [ci1off + d1 + {{ space1.ndofs }} * (nz + {{  space1.nbasis_z[ci]  }} * (ny + {{ space1.nbasis_y[ci]  }} * nx))]
 {% endfor %}
 {% endif %}
 {% if formdim == 2 %}
 {% for ci in range(space2.ncomp) %}
#define s2_{{ci}}_indices [d2 + {{ space2.ndofs }} * (mz + {{  space2.nbasis_z[ci]  }} * (my + {{ space2.nbasis_y[ci]  }} * mx))]
#define s2_{{ci}}_indices_off [ci2off + d2 + {{ space2.ndofs }} * (mz + {{  space2.nbasis_z[ci]  }} * (my + {{ space2.nbasis_y[ci]  }} * mx))]
 {% endfor %}
{% endif %}

//Works because we have already unsplatted vals from kernel into vals1/vals2
{%macro SETVALS(ci,cell) -%}
 #define kk (k{{cell}}cell * offset_mult1_z_{{ ci }}[bi{{cell}}_1_z_{{ci}}][nz] + offsets1_z_{{ ci }}[bi{{cell}}_1_z_{{ci}}][nz])
 #define jj (j{{cell}}cell * offset_mult1_y_{{ ci }}[bi{{cell}}_1_y_{{ci}}][ny] + offsets1_y_{{ ci }}[bi{{cell}}_1_y_{{ci}}][ny])
 #define ii (i{{cell}}cell * offset_mult1_x_{{ ci }}[bi{{cell}}_1_x_{{ci}}][nx] + offsets1_x_{{ ci }}[bi{{cell}}_1_x_{{ci}}][nx])
 #define vals vals{{cell}}_{{ ci }}
for (nx=0;nx<{{ space1.nbasis_x[ci] }};nx++) {
for (ny=0;ny<{{ space1.nbasis_y[ci] }};ny++) {
for (nz=0;nz<{{ space1.nbasis_z[ci] }};nz++) {
for (d1=0;d1<{{ space1.ndofs }};d1++) {
{% if ndim == 1 %}
data_formvec_{{ ci }}[ii][d1] += vals s1_{{ci}}_indices;
{% endif %}
{% if ndim == 2 %}
data_formvec_{{ ci }}[jj][ii][d1] += vals s1_{{ci}}_indices;
{% endif %}
{% if ndim == 3 %}
data_formvec_{{ ci }}[kk][jj][ii][d1] += vals s1_{{ci}}_indices;
{% endif %}
}}}}
#undef ii
#undef jj
#undef kk
#undef vals
{% endmacro %}
//


#include <petsc.h>
#include "math.h"
#include <stdio.h>

//Actual kernel snippet
		{{ kernelstr }}

 {% if formdim == 2 %}
PetscErrorCode assemble(DM da {{ submatlist }}  {{ space1.dalist }}  {{ space2.dalist }} {{ fieldargs }} {{ constantargs }})
{% endif %}
 {% if formdim == 1 %}
PetscErrorCode assemble(DM da {{ subveclist }} {{ space1.dalist }} {{ fieldargs }} {{ constantargs }})
{% endif %}
 {% if formdim == 0 %}
PetscScalar assemble(DM da {{ fieldargs }} {{ constantargs }})
{% endif %}

{

 {% if formdim == 2 %}
 {% if facet_type == 'interior' %}
 PetscScalar vals[{{ space1.nbasis_total }} * 2 * {{ space1.ndofs }}][{{ space2.nbasis_total }} * 2 * {{ space2.ndofs }}] = { {0.,},};
 {% endif %}
 {% if facet_type == 'exterior' %}
 PetscScalar vals[{{ space1.nbasis_total }} * {{ space1.ndofs }}][{{ space2.nbasis_total }} * {{ space2.ndofs }}] = { {0.,},};
 {% endif %}

 {% for ci1 in range(space1.ncomp) %}
 {% for ci2 in range(space2.ncomp) %}
  PetscScalar	vals11_{{ ci1 }}_{{ ci2 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}][{{ space2.nbasis[ci2] }} * {{ space2.ndofs }}] = { {0.,},};
  PetscScalar	vals12_{{ ci1 }}_{{ ci2 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}][{{ space2.nbasis[ci2] }} * {{ space2.ndofs }}] = { {0.,},};
  PetscScalar	vals21_{{ ci1 }}_{{ ci2 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}][{{ space2.nbasis[ci2] }} * {{ space2.ndofs }}] = { {0.,},};
  PetscScalar	vals22_{{ ci1 }}_{{ ci2 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}][{{ space2.nbasis[ci2] }} * {{ space2.ndofs }}] = { {0.,},};
 {% endfor %}
 {% endfor %}

  {% for ci2 in range(space2.ncomp) %}
   PetscInt     cols1_{{ ci2 }}[{{ space2.nbasis[ci2] }} * {{ space2.ndofs }}];
   PetscInt     cols2_{{ ci2 }}[{{ space2.nbasis[ci2] }} * {{ space2.ndofs }}];
    {% endfor %}
    {% for ci1 in range(space1.ncomp) %}
    PetscInt     rows1_{{ ci1 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}];
    PetscInt     rows2_{{ ci1 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}];
 {% endfor %}
 {% endif %}

 {% if formdim == 1 %}
  {% if facet_type == 'interior' %}
 PetscScalar vals[{{ space1.nbasis_total }} * 2 * {{ space1.ndofs }}] = {0.,};
 {% endif %}
 {% if facet_type == 'exterior' %}
 PetscScalar vals[{{ space1.nbasis_total }} * {{ space1.ndofs }}] = {0.,};
 {% endif %}

 {% for ci1 in range(space1.ncomp) %}
 PetscScalar	vals1_{{ ci1 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}]= {0.,};
 PetscScalar	vals2_{{ ci1 }}[{{ space1.nbasis[ci1] }} * {{ space1.ndofs }}]= {0.,};
 {% if ndim == 1 %}
 PetscScalar **data_formvec_{{ ci1 }};
      {% endif %}
 {% if ndim == 2 %}
 PetscScalar ***data_formvec_{{ ci1 }};
      {% endif %}
 {% if ndim == 3 %}
 PetscScalar ****data_formvec_{{ ci1 }};
      {% endif %}
  {% endfor %}
 {% endif %}

 {% if formdim == 0 %}
 PetscScalar	vals[1] = {0.0,};
 PetscScalar formsum[1] = {0.0,};
 {% endif %}

  PetscErrorCode ierr;
  PetscInt ci1off,ci2off;
  PetscInt i,j,k; //spatial loop indices
   PetscInt lx,ly,lz; //field indices
   PetscInt nx,ny,nz; //space1 indices
   PetscInt mx,my,mz; //space2 indices
   PetscInt d,d1,d2; //dof indices
  PetscInt xs,xm,ys,ym,zs,zm,xmax,ymax,zmax;
   PetscInt upper_boundary = 0;
  PetscInt lower_boundary = 0;
   {% if formdim >= 1 %}
  {% for ci1 in range(space1.ncomp) %}
  PetscInt x1s_{{ ci1 }},x1m_{{ ci1 }},y1s_{{ ci1 }},y1m_{{ ci1 }},z1s_{{ ci1 }},z1m_{{ ci1 }};
    {% endfor %}
   {% endif %}
 {% if formdim == 2 %}
  {% for ci2 in range(space2.ncomp) %}
  PetscInt x2s_{{ ci2 }},x2m_{{ ci2 }},y2s_{{ ci2 }},y2m_{{ ci2 }},z2s_{{ ci2 }},z2m_{{ ci2 }};
   {% endfor %}
 {% endif %}

 {% if formdim == 2 %}
  {% for ci2 in range(space2.ncomp) %}
const   PetscInt offsets2_x_{{ ci2 }}[{{ space2.nblocks_x[ci2] }}][{{ space2.nbasis_x[ci2] }}] = {{ space2.offsets_x[ci2] }};
const   PetscInt offsets2_y_{{ ci2 }}[{{ space2.nblocks_y[ci2] }}][{{ space2.nbasis_y[ci2] }}] = {{ space2.offsets_y[ci2] }};
const   PetscInt offsets2_z_{{ ci2 }}[{{ space2.nblocks_z[ci2] }}][{{ space2.nbasis_z[ci2] }}] = {{ space2.offsets_z[ci2] }};
const   PetscInt offset_mult2_x_{{ ci2 }}[{{ space2.nblocks_x[ci2] }}][{{ space2.nbasis_x[ci2] }}] = {{ space2.offset_mult_x[ci2] }};
const   PetscInt offset_mult2_y_{{ ci2 }}[{{ space2.nblocks_y[ci2] }}][{{ space2.nbasis_y[ci2] }}] = {{ space2.offset_mult_y[ci2] }};
const   PetscInt offset_mult2_z_{{ ci2 }}[{{ space2.nblocks_z[ci2] }}][{{ space2.nbasis_z[ci2] }}] = {{ space2.offset_mult_z[ci2] }};
   PetscInt bi1_2_x_{{ ci2 }} = -1000;
   PetscInt bi1_2_y_{{ ci2 }} = -1000;
   PetscInt bi1_2_z_{{ ci2 }} = -1000;
   PetscInt bi2_2_x_{{ ci2 }} = -1000;
   PetscInt bi2_2_y_{{ ci2 }} = -1000;
   PetscInt bi2_2_z_{{ ci2 }} = -1000;
  {% endfor %}
  {% endif %}
 {% if formdim >= 1 %}
 {% for ci1 in range(space1.ncomp) %}
const   PetscInt offsets1_x_{{ ci1 }}[{{ space1.nblocks_x[ci1] }}][{{ space1.nbasis_x[ci1] }}] = {{ space1.offsets_x[ci1] }};
const   PetscInt offsets1_y_{{ ci1 }}[{{ space1.nblocks_y[ci1] }}][{{ space1.nbasis_y[ci1] }}] = {{ space1.offsets_y[ci1] }};
const   PetscInt offsets1_z_{{ ci1 }}[{{ space1.nblocks_z[ci1] }}][{{ space1.nbasis_z[ci1] }}] = {{ space1.offsets_z[ci1] }};
const   PetscInt offset_mult1_x_{{ ci1 }}[{{ space1.nblocks_x[ci1] }}][{{ space1.nbasis_x[ci1] }}] = {{ space1.offset_mult_x[ci1] }};
const   PetscInt offset_mult1_y_{{ ci1 }}[{{ space1.nblocks_y[ci1] }}][{{ space1.nbasis_y[ci1] }}] = {{ space1.offset_mult_y[ci1] }};
const   PetscInt offset_mult1_z_{{ ci1 }}[{{ space1.nblocks_z[ci1] }}][{{ space1.nbasis_z[ci1] }}] = {{ space1.offset_mult_z[ci1] }};
   PetscInt bi1_1_x_{{ ci1 }} = -1000;
   PetscInt bi1_1_y_{{ ci1 }} = -1000;
   PetscInt bi1_1_z_{{ ci1 }} = -1000;
   PetscInt bi2_1_x_{{ ci1 }} = -1000;
   PetscInt bi2_1_y_{{ ci1 }} = -1000;
   PetscInt bi2_1_z_{{ ci1 }} = -1000;
  {% endfor %}
  {% endif %}

 {% for field in fieldlist %}
 PetscInt {{field.name}}_offset;
 {% if facet_type == 'interior' %}
 PetscScalar	{{field.name}}_vals[{{ field.nbasis_total }} * 2 * {{ field.ndofs }}] = { 0.,};
 {% endif %}
 {% if facet_type == 'exterior' %}
 PetscScalar	{{field.name}}_vals[{{ field.nbasis_total }} * {{ field.ndofs }}] = { 0.,};
 {% endif %}
 {% for k in range(field.ncomp) %}
const   PetscInt {{field.name}}_{{k}}_offsets_x[{{ field.nblocks_x[k] }}][{{ field.nbasis_x[k] }}] = {{ field.offsets_x[k] }};
const   PetscInt {{field.name}}_{{k}}_offsets_y[{{ field.nblocks_y[k] }}][{{ field.nbasis_y[k] }}] = {{ field.offsets_y[k] }};
const   PetscInt {{field.name}}_{{k}}_offsets_z[{{ field.nblocks_z[k] }}][{{ field.nbasis_z[k] }}] = {{ field.offsets_z[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_x[{{ field.nblocks_x[k] }}][{{ field.nbasis_x[k] }}] = {{ field.offset_mult_x[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_y[{{ field.nblocks_y[k] }}][{{ field.nbasis_y[k] }}] = {{ field.offset_mult_y[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_z[{{ field.nblocks_z[k] }}][{{ field.nbasis_z[k] }}] = {{ field.offset_mult_z[k] }};
   PetscInt bi1_{{field.name}}_x_{{k}} = -1000;
   PetscInt bi1_{{field.name}}_y_{{k}} = -1000;
   PetscInt bi1_{{field.name}}_z_{{k}} = -1000;
   PetscInt bi2_{{field.name}}_x_{{k}} = -1000;
   PetscInt bi2_{{field.name}}_y_{{k}} = -1000;
   PetscInt bi2_{{field.name}}_z_{{k}} = -1000;
#define {{field.name}}_{{k}}_indices [{{field.name}}_offset + d + {{ field.ndofs }} * (lz + {{  field.nbasis_z[k]  }} * (ly + {{ field.nbasis_y[k]  }} * lx))]

 {% if ndim == 1 %}
  PetscScalar **data_{{field.name}}_{{k}};
      {% endif %}
 {% if ndim == 2 %}
  PetscScalar ***data_{{field.name}}_{{k}};
      {% endif %}
 {% if ndim == 3 %}
  PetscScalar ****data_{{field.name}}_{{k}};
      {% endif %}
    {% endfor %}
  {% endfor %}

 {% for tabulation in tabulations %}
 const   PetscScalar {{ tabulation.name }}[{{ tabulation.nblocks }}][{{ tabulation.npts }}][{{ tabulation.nbasis }}] = {{ tabulation.values }};
  {% if tabulation.shiftaxis == 0 %}
 PetscInt bi1_{{ tabulation.name }}_x_0 = -1000;
 PetscInt bi2_{{ tabulation.name }}_x_0 = -1000;
     {% endif %}
 {% if tabulation.shiftaxis == 1 %}
 PetscInt bi1_{{ tabulation.name }}_y_0 = -1000;
 PetscInt bi2_{{ tabulation.name }}_y_0 = -1000;
     {% endif %}
      {% if tabulation.shiftaxis == 2 %}
 PetscInt bi1_{{ tabulation.name }}_z_0 = -1000;
 PetscInt bi2_{{ tabulation.name }}_z_0 = -1000;
     {% endif %}
 {% endfor %}

	//*************************************//

	//get DMDA ranges
   {% if formdim >= 1 %}
       {% for ci1 in range(space1.ncomp) %}
  ierr = DMDAGetGhostCorners(da_s1_{{ ci1 }},&x1s_{{ ci1 }},&y1s_{{ ci1 }},&z1s_{{ ci1 }},&x1m_{{ ci1 }},&y1m_{{ ci1 }},&z1m_{{ ci1 }});CHKERRQ(ierr);
      {% endfor %}
    {% endif %}
    {% if formdim >= 2 %}
         {% for ci2 in range(space2.ncomp) %}
  ierr = DMDAGetGhostCorners(da_s2_{{ ci2 }},&x2s_{{ ci2 }},&y2s_{{ ci2 }},&z2s_{{ ci2 }},&x2m_{{ ci2 }},&y2m_{{ ci2 }},&z2m_{{ ci2 }});CHKERRQ(ierr);
       {% endfor %}
      {% endif %}
  ierr = DMDAGetCorners(da,&xs,&ys,&zs,&xm,&ym,&zm);CHKERRQ(ierr);
  ierr = DMDAGetInfo(da,0,&xmax,&ymax,&zmax,0,0,0,0,0,0,0,0,0);CHKERRQ(ierr);


//determine if we own the upper/lower boundary
{% if facet_direc == 0 %}
if (xs == 0) { //if owned
lower_boundary = 1;
}
if (xs+xm == xmax) { //if owned
upper_boundary = 1;
}
{% endif %}
{% if facet_direc == 1 %}
if (ys == 0) { //if owned
lower_boundary = 1;
}
if (ys+ym == ymax) { //if owned
upper_boundary = 1;
}
{% endif %}
{% if facet_direc == 2 %}
if (zs == 0) { //if owned
lower_boundary = 1;
}
if (zs+zm == zmax) { //if owned
upper_boundary = 1;
}
{% endif %}
//

//if exterior facet, check that this process actually owns any part of the relevant boundary!
{% if facet_type == 'exterior' %}
{% if facet_exterior_boundary == 'upper' %}
if (upper_boundary == 0) PetscFunctionReturn(0);
{% endif %}
{% if facet_exterior_boundary == 'lower' %}
if (lower_boundary == 0) PetscFunctionReturn(0);
{% endif %}
{% endif %}

	//*************************************//
//get field data
 {% for field in fieldlist %}
      {% for k in range(field.ncomp) %}
  ierr = DMDAVecGetArrayDOFRead(da_{{field.name}}_{{k}},{{field.name}}_{{k}},&data_{{field.name}}_{{k}});CHKERRQ(ierr);
      {% endfor %}
  {% endfor %}

  //Get the data out of Vec formvec
    {% if formdim == 1 %}
     {% for ci1 in range(space1.ncomp) %}
    ierr = DMDAVecGetArrayDOF(da_s1_{{ ci1 }},formvec_{{ ci1 }},&data_formvec_{{ ci1 }});CHKERRQ(ierr);
      {% endfor %}
    {% endif %}
	//*************************************//

// here i/j/k represent the cell we are looping over
// each cell "owns" its left edge, plus the LAST cell owns its right edge if non-periodic
// i1/i2. are the left/right CELLS associated with that edge
// in parallel just need to be careful with loop bounds in "active" dimension
// for periodic interior, everything is fine

// for non-periodic interior need to skip the first edge
// therefore we must adjust the loop bounds by adding 1 IFF we own the lower boundary
// also subtract off 1 from xm

{% if facet_type == 'interior' %}
{% if facet_direc == 0 and (bcs[0] == 'nonperiodic') %}
if (lower_boundary == 1) {xs = xs+1; xm = xm-1;}
{% endif %}
{% if facet_direc == 1 and (bcs[1] == 'nonperiodic') %}
if (lower_boundary == 1) {ys = ys+1; ym = ym-1;}
{% endif %}
{% if facet_direc == 2 and (bcs[2] == 'nonperiodic') %}
if (lower_boundary == 1) {zs = zs+1; zm = zm-1;}
{% endif %}
{% endif %}


// for exterior do the upper/lower boundary IFF they are owned
// lower boundary (set xm=1) noting xs=0 already!
// upper boundary (set xs= xmax and xm=1)

{% if facet_type == 'exterior' %}
{% if facet_exterior_boundary == 'lower' %}
{% if facet_direc == 0 %}
if (lower_boundary == 1) {xm = 1;}
{% endif %}
{% if facet_direc == 1 %}
if (lower_boundary == 1) {ym = 1;}
{% endif %}
{% if facet_direc == 2 %}
if (lower_boundary == 1) {zm = 1;}
{% endif %}
{% endif %}

{% if facet_exterior_boundary == 'upper' %}
{% if facet_direc == 0 %}
if (upper_boundary == 1) {xs = xmax; xm = 1;}
{% endif %}
{% if facet_direc == 1 %}
if (upper_boundary == 1) {ys = ymax; ym = 1;}
{% endif %}
{% if facet_direc == 2 %}
if (upper_boundary == 1) {zs = zmax; zm = 1;}
{% endif %}
{% endif %}

{% endif %}
//

	//*************************************//

//set facet number

{% if facet_type == 'exterior' %}
	{% if facet_exterior_boundary == 'lower' and facet_direc == 0 %}
	const unsigned int facet_number[1] = {0,};
	{% endif %}
	{% if facet_exterior_boundary == 'upper' and facet_direc == 0 %}
	const unsigned int facet_number[1] = {1,};
	{% endif %}
	{% if facet_exterior_boundary == 'lower' and facet_direc == 1 %}
	const unsigned int facet_number[1] = {2,};
	{% endif %}
	{% if facet_exterior_boundary == 'upper' and facet_direc == 1 %}
	const unsigned int facet_number[1] = {3,};
	{% endif %}
	{% if facet_exterior_boundary == 'lower' and facet_direc == 2 %}
	const unsigned int facet_number[1] = {4,};
	{% endif %}
	{% if facet_exterior_boundary == 'upper' and facet_direc == 2 %}
	const unsigned int facet_number[1] = {5,};
	{% endif %}
{% endif %}

{% if facet_type == 'interior' %}
	{% if facet_direc == 0 %}
	const unsigned int facet_number[2] = {1,0};
	{% endif %}
	{% if facet_direc == 1 %}
	const unsigned int facet_number[2] = {3,2};
	{% endif %}
	{% if facet_direc == 2 %}
	const unsigned int facet_number[2] = {5,4};
	{% endif %}
{% endif %}

 {% from 'setblocks-facet.template' import SET_PERIODIC_OTHER with context %}
 {% from 'setblocks-facet.template' import SET_NONPERIODIC_X_OTHER with context %}
 {% from 'setblocks-facet.template' import SET_NONPERIODIC_Y_OTHER with context %}
 {% from 'setblocks-facet.template' import SET_NONPERIODIC_Z_OTHER with context %}
 {% from 'setblocks-facet.template' import SET_PERIODIC_FIELDS with context %}
 {% from 'setblocks-facet.template' import SET_NONPERIODIC_X_FIELDS with context %}
 {% from 'setblocks-facet.template' import SET_NONPERIODIC_Y_FIELDS with context %}
 {% from 'setblocks-facet.template' import SET_NONPERIODIC_Z_FIELDS with context %}

 	{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}
	 {{ SET_PERIODIC_OTHER(2) }}
{{ SET_PERIODIC_FIELDS(2) }}
	{% endif %}
 	{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}
 {{ SET_PERIODIC_OTHER(1) }}
{{ SET_PERIODIC_FIELDS(1) }}
	{% endif %}

//loop over edges

for (k=zs; k<zs+zm; k++) {
	 	{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}
	{{ SET_NONPERIODIC_Z_OTHER(2) }}
	{{ SET_NONPERIODIC_Z_FIELDS(2) }}
	{% endif %}
	 	{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}
	{{ SET_NONPERIODIC_Z_OTHER(1) }}
	{{ SET_NONPERIODIC_Z_FIELDS(1) }}
	{% endif %}

   for (j=ys; j<ys+ym; j++) {
	    	{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}
	   {{ SET_NONPERIODIC_Y_OTHER(2) }}
	   {{ SET_NONPERIODIC_Y_FIELDS(2) }}
	{% endif %}
	       	{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}
	   {{ SET_NONPERIODIC_Y_OTHER(1) }}
	   {{ SET_NONPERIODIC_Y_FIELDS(1) }}
	   	{% endif %}

      for (i=xs; i<xs+xm; i++) {
	       	{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}
		{{ SET_NONPERIODIC_X_OTHER(2) }}
		{{ SET_NONPERIODIC_X_FIELDS(2) }}
	{% endif %}
		{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}
		{{ SET_NONPERIODIC_X_OTHER(1) }}
		{{ SET_NONPERIODIC_X_FIELDS(1) }}
	{% endif %}




		 {% if formdim == 2 %}

	{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}
		 //cell 1
       {% for ci1 in range(space1.ncomp) %}
       #define icoord (i1cell * offset_mult1_x_{{ ci1 }}[bi1_1_x_{{ ci1 }}][nx] + offsets1_x_{{ ci1 }}[bi1_1_x_{{ ci1 }}][nx] - x1s_{{ ci1 }})
       #define jcoord (j1cell * offset_mult1_y_{{ ci1 }}[bi1_1_y_{{ ci1 }}][ny] + offsets1_y_{{ ci1 }}[bi1_1_y_{{ ci1 }}][ny] - y1s_{{ ci1 }})
       #define kcoord (k1cell * offset_mult1_z_{{ ci1 }}[bi1_1_z_{{ ci1 }}][nz] + offsets1_z_{{ ci1 }}[bi1_1_z_{{ ci1 }}][nz] - z1s_{{ ci1 }})
		for (nx=0;nx<{{ space1.nbasis_x[ci1] }};nx++) {
		for (ny=0;ny<{{ space1.nbasis_y[ci1] }};ny++) {
		for (nz=0;nz<{{ space1.nbasis_z[ci1] }};nz++) {
        for (d1=0;d1<{{ space1.ndofs }};d1++) {
			rows1_{{ ci1 }} s1_{{ci1}}_indices =  d1 + {{ space1.ndofs }} * (icoord + x1m_{{ ci1 }}*(jcoord + y1m_{{ ci1 }}*kcoord));
		}}}}
        #undef icoord
        #undef jcoord
        #undef kcoord
      {% endfor %}
       {% for ci2 in range(space2.ncomp) %}
       #define icoord (i1cell * offset_mult2_x_{{ ci2 }}[bi1_2_x_{{ ci2 }}][mx] + offsets2_x_{{ ci2 }}[bi1_2_x_{{ ci2 }}][mx] - x2s_{{ ci2 }})
       #define jcoord (j1cell * offset_mult2_y_{{ ci2 }}[bi1_2_y_{{ ci2 }}][my] + offsets2_y_{{ ci2 }}[bi1_2_y_{{ ci2 }}][my] - y2s_{{ ci2 }})
       #define kcoord (k1cell * offset_mult2_z_{{ ci2 }}[bi1_2_z_{{ ci2 }}][mz] + offsets2_z_{{ ci2 }}[bi1_2_z_{{ ci2 }}][mz] - z2s_{{ ci2 }})
		for (mx=0;mx<{{ space2.nbasis_x[ci2] }};mx++) {
		for (my=0;my<{{ space2.nbasis_y[ci2] }};my++) {
		for (mz=0;mz<{{ space2.nbasis_z[ci2] }};mz++) {
        for (d2=0;d2<{{ space2.ndofs }};d2++) {
			cols1_{{ ci2 }} s2_{{ci2}}_indices =  d2 + {{ space2.ndofs }} * (icoord + x2m_{{ ci2 }}*(jcoord + y2m_{{ ci2 }}*kcoord));
		}}}}
        #undef icoord
        #undef jcoord
        #undef kcoord
	 {% endfor %}
		{% endif %}

		{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}
		//cell 2
       {% for ci1 in range(space1.ncomp) %}
       #define icoord (i2cell * offset_mult1_x_{{ ci1 }}[bi2_1_x_{{ ci1 }}][nx] + offsets1_x_{{ ci1 }}[bi2_1_x_{{ ci1 }}][nx] - x1s_{{ ci1 }})
       #define jcoord (j2cell * offset_mult1_y_{{ ci1 }}[bi2_1_y_{{ ci1 }}][ny] + offsets1_y_{{ ci1 }}[bi2_1_y_{{ ci1 }}][ny] - y1s_{{ ci1 }})
       #define kcoord (k2cell * offset_mult1_z_{{ ci1 }}[bi2_1_z_{{ ci1 }}][nz] + offsets1_z_{{ ci1 }}[bi2_1_z_{{ ci1 }}][nz] - z1s_{{ ci1 }})
		for (nx=0;nx<{{ space1.nbasis_x[ci1] }};nx++) {
		for (ny=0;ny<{{ space1.nbasis_y[ci1] }};ny++) {
		for (nz=0;nz<{{ space1.nbasis_z[ci1] }};nz++) {
        for (d1=0;d1<{{ space1.ndofs }};d1++) {
			rows2_{{ ci1 }} s1_{{ci1}}_indices =  d1 + {{ space1.ndofs }} * (icoord + x1m_{{ ci1 }}*(jcoord + y1m_{{ ci1 }}*kcoord));
		}}}}
        #undef icoord
        #undef jcoord
        #undef kcoord
      {% endfor %}

       {% for ci2 in range(space2.ncomp) %}
       #define icoord (i2cell * offset_mult2_x_{{ ci2 }}[bi2_2_x_{{ ci2 }}][mx] + offsets2_x_{{ ci2 }}[bi2_2_x_{{ ci2 }}][mx] - x2s_{{ ci2 }})
       #define jcoord (j2cell * offset_mult2_y_{{ ci2 }}[bi2_2_y_{{ ci2 }}][my] + offsets2_y_{{ ci2 }}[bi2_2_y_{{ ci2 }}][my] - y2s_{{ ci2 }})
       #define kcoord (k2cell * offset_mult2_z_{{ ci2 }}[bi2_2_z_{{ ci2 }}][mz] + offsets2_z_{{ ci2 }}[bi2_2_z_{{ ci2 }}][mz] - z2s_{{ ci2 }})
		for (mx=0;mx<{{ space2.nbasis_x[ci2] }};mx++) {
		for (my=0;my<{{ space2.nbasis_y[ci2] }};my++) {
		for (mz=0;mz<{{ space2.nbasis_z[ci2] }};mz++) {
        for (d2=0;d2<{{ space2.ndofs }};d2++) {
			cols2_{{ ci2 }} s2_{{ci2}}_indices =  d2 + {{ space2.ndofs }} * (icoord + x2m_{{ ci2 }}*(jcoord + y2m_{{ ci2 }}*kcoord));
		}}}}
        #undef icoord
        #undef jcoord
        #undef kcoord
	 {% endfor %}
		{% endif %}


		{% endif %}


			//*************************************//

		//extract element dofs from local dofs

		 {% for field in fieldlist %}

		 		{{field.name}}_offset = 0;
		 //For interior facet this is organized as + (1) followed by - (2)
		 {% if facet_type == 'interior' %}
		 {% set ijklist = [('i1cell','j1cell','k1cell','1'),('i2cell','j2cell','k2cell','2')]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'upper' %}
		 {% set ijklist = [('i1cell','j1cell','k1cell','1'),]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'lower' %}
		 {% set ijklist = [('i2cell','j2cell','k2cell','2'),]%}
		 {% endif %}

		 {% for i,j,k,cell in ijklist %}
		 #define ic {{ i }}
		 #define jc {{ j }}
		 #define kc {{ k }}
		{% for k in range(field.ncomp) %}
		{%set offset_mult = field.name~'_'~k ~'_offset_mult' %}
		{%set offset = field.name~'_'~k ~'_offsets' %}
		#define ii (ic*{{ offset_mult }}_x[bi{{cell}}_{{field.name}}_x_{{k}}][lx] + {{ offset }}_x[bi{{cell}}_{{field.name}}_x_{{k}}][lx])
		#define jj (jc*{{ offset_mult }}_y[bi{{cell}}_{{field.name}}_y_{{k}}][ly] + {{ offset }}_y[bi{{cell}}_{{field.name}}_y_{{k}}][ly])
		#define kk (kc*{{ offset_mult }}_z[bi{{cell}}_{{field.name}}_z_{{k}}][lz] + {{ offset }}_z[bi{{cell}}_{{field.name}}_z_{{k}}][lz])
		for (lx=0;lx<{{ field.nbasis_x[k] }};lx++){
		for (ly=0;ly<{{ field.nbasis_y[k] }};ly++){
		for (lz=0;lz<{{ field.nbasis_z[k] }};lz++){
		for (d=0;d<{{ field.ndofs }};d++){
		{% if ndim == 1 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [ii][d];
		{% endif %}
		{% if ndim == 2 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [jj][ii][d];
		{% endif %}
		{% if ndim == 3 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [kk][jj][ii][d];
		{% endif %}
		}}}}
		#undef ii
		#undef jj
		#undef kk
		{{field.name}}_offset = {{field.name}}_offset + {{ field.nbasis[k] }} * {{ field.ndofs }};
		{% endfor %}
		#undef ic
		#undef jc
		#undef kc
		{% endfor %}

		{% endfor %}

			//*************************************//

		//compute the element tensor

		    {% if formdim == 2 %}
			 {% if facet_type == 'interior' %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ space1.nbasis_total }} * 2 * {{ space1.ndofs }}][{{ space2.nbasis_total }} * 2 * {{ space2.ndofs }}])); CHKERRQ(ierr);
					{% endif %}
	 {% if facet_type == 'exterior' %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ space1.nbasis_total }} * {{ space1.ndofs }}][{{ space2.nbasis_total }} * {{ space2.ndofs }}])); CHKERRQ(ierr);
				{% endif %}
				{% endif %}

		    {% if formdim == 1 %}
			 {% if facet_type == 'interior' %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ space1.nbasis_total }} * 2 * {{ space1.ndofs }}])); CHKERRQ(ierr);
					{% endif %}
	 {% if facet_type == 'exterior' %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ space1.nbasis_total }} * {{ space1.ndofs }}])); CHKERRQ(ierr);
					{% endif %}
				{% endif %}

		    {% if formdim == 0 %}
		    vals[0] = 0.0;
				{% endif %}

				{% if not kernelstr == '' %}

    //extruded doesn't need a facet number
  	 {% if extruded == 1 %}
		{{kernelname}}(vals
            {{ kernelargs }}
				 {% for tabulation in tabulations %}
				  {% if tabulation.shiftaxis == 0 %}
				 ,{{tabulation.name}}[bi{{tabulation.cell}}_{{ tabulation.name }}_x_0]
			      	{% endif %}
				  {% if tabulation.shiftaxis == 1 %}
				 ,{{tabulation.name}}[bi{{tabulation.cell}}_{{ tabulation.name }}_y_0]
			      	{% endif %}
				  {% if tabulation.shiftaxis == 2 %}
				 ,{{tabulation.name}}[bi{{tabulation.cell}}_{{ tabulation.name }}_z_0]
			      	{% endif %}
				{% endfor %}
			);
    {% endif %}

    //non-extruded needs a facet number, but it is the same convention as extruded ie - = 2 and + = 1 (or similar for y/z directions)
  	 {% if extruded == 0 %}
		{{kernelname}}(vals
            {{ kernelargs }}
				 ,facet_number
				 {% for tabulation in tabulations %}
				  {% if tabulation.shiftaxis == 0 %}
				 ,{{tabulation.name}}[bi{{tabulation.cell}}_{{ tabulation.name }}_x_0]
			      	{% endif %}
				  {% if tabulation.shiftaxis == 1 %}
				 ,{{tabulation.name}}[bi{{tabulation.cell}}_{{ tabulation.name }}_y_0]
			      	{% endif %}
				  {% if tabulation.shiftaxis == 2 %}
				 ,{{tabulation.name}}[bi{{tabulation.cell}}_{{ tabulation.name }}_z_0]
			      	{% endif %}
				{% endfor %}
			);
    {% endif %}

    				{% endif %}

	//*************************************//
			//unsplat vals

		//for interior facet this is all 4 vals (2 for 1-forms)
		//for exterior facet this is just 1 set of vals


	 {% if formdim == 2 %}

		 {% if facet_type == 'interior' %}
		 {% set celllist1 = [(1,0),(2,space1.nbasis_total * space1.ndofs)]%}
		 {% set celllist2 = [(1,0),(2,space2.nbasis_total * space2.ndofs)]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'upper' %}
		 {% set celllist1 = [(1,0),]%}
		 {% set celllist2 = [(1,0),]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'lower' %}
		 {% set celllist1 = [(2,0),]%}
		 {% set celllist2 = [(2,0),]%}
		 {% endif %}

	{% for cell1,offset1 in celllist1 %}
	{% for cell2,offset2 in celllist2 %}
	   ci1off = {{ offset1 }};
       {% for ci1 in range(space1.ncomp) %}
       ci2off = {{ offset2 }};
       {% for ci2 in range(space2.ncomp) %}
        for (nx=0;nx<{{ space1.nbasis_x[ci1] }};nx++) {
		for (ny=0;ny<{{ space1.nbasis_y[ci1] }};ny++) {
		for (nz=0;nz<{{ space1.nbasis_z[ci1] }};nz++) {
        for (d1=0;d1<{{ space1.ndofs }};d1++) {
		for (mx=0;mx<{{ space2.nbasis_x[ci2] }};mx++) {
		for (my=0;my<{{ space2.nbasis_y[ci2] }};my++) {
		for (mz=0;mz<{{ space2.nbasis_z[ci2] }};mz++) {
        for (d2=0;d2<{{ space2.ndofs }};d2++) {
       vals{{ cell1 }}{{ cell2 }}_{{ ci1 }}_{{ ci2 }} s1_{{ci1}}_indices s2_{{ci2}}_indices = vals s1_{{ci1}}_indices_off s2_{{ci2}}_indices_off;
   }}}}}}}}
   ci2off = ci2off + {{ space2.nbasis[ci2] }} * {{ space2.ndofs }};
				{% endfor %}
			ci1off = ci1off + {{ space1.nbasis[ci1] }} * {{ space1.ndofs }};
				{% endfor %}
				{% endfor %}
				{% endfor %}

				{% endif %}



					    {% if formdim == 1 %}

		 {% if facet_type == 'interior' %}
		 {% set celllist1 = [(1,0),(2,space1.nbasis_total * space1.ndofs)]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'upper' %}
		 {% set celllist1 = [(1,0),]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'lower' %}
		 {% set celllist1 = [(2,0),]%}
		 {% endif %}

	{% for cell1,offset1 in celllist1 %}

			ci1off = {{ offset1 }};
		       {% for ci1 in range(space1.ncomp) %}
        for (nx=0;nx<{{ space1.nbasis_x[ci1] }};nx++) {
		for (ny=0;ny<{{ space1.nbasis_y[ci1] }};ny++) {
		for (nz=0;nz<{{ space1.nbasis_z[ci1] }};nz++) {
        for (d1=0;d1<{{ space1.ndofs }};d1++) {
			vals{{ cell1 }}_{{ ci1 }} s1_{{ci1}}_indices = vals s1_{{ci1}}_indices_off;
		}}}}
						ci1off = ci1off + {{ space1.nbasis[ci1] }} * {{ space1.ndofs }};
				{% endfor %}
						{% endfor %}
		{% endif %}

			//*************************************//

		//Put the element tensor into the local tensor
		//printf("setting vals\n");

{% if formdim == 2 %}
		{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}
		       {% for ci1 in range(space1.ncomp) %}
       {% for ci2 in range(space2.ncomp) %}
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ space1.nbasis[ci1] }} * {{ space1.ndofs }},rows1_{{ ci1 }},{{ space2.nbasis[ci2] }} * {{ space2.ndofs }},cols1_{{ ci2 }},*vals11_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
			 {% endfor %}
	 {% endfor %}
		{% endif %}

		{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}
		       {% for ci1 in range(space1.ncomp) %}
       {% for ci2 in range(space2.ncomp) %}
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ space1.nbasis[ci1] }} * {{ space1.ndofs }},rows2_{{ ci1 }},{{ space2.nbasis[ci2] }} * {{ space2.ndofs }},cols2_{{ ci2 }},*vals22_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
			 {% endfor %}
	 {% endfor %}
		{% endif %}

		{% if facet_type == 'interior' %}
		       {% for ci1 in range(space1.ncomp) %}
       {% for ci2 in range(space2.ncomp) %}
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ space1.nbasis[ci1] }} * {{ space1.ndofs }},rows1_{{ ci1 }},{{ space2.nbasis[ci2] }} * {{ space2.ndofs }},cols2_{{ ci2 }},*vals12_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ space1.nbasis[ci1] }} * {{ space1.ndofs }},rows2_{{ ci1 }},{{ space2.nbasis[ci2] }} * {{ space2.ndofs }},cols1_{{ ci2 }},*vals21_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
			 {% endfor %}
	 {% endfor %}
		{% endif %}

		{% endif %}


		{% if formdim == 1 %}
		{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}
		 {% for ci1 in range(space1.ncomp) %}
		{{ SETVALS(ci1,1) }}
		{% endfor %}
		{% endif %}
		{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}
		 {% for ci1 in range(space1.ncomp) %}
		{{ SETVALS(ci1,2) }}
		{% endfor %}
		{% endif %}
		{% endif %}

		{% if formdim == 0 %}
		formsum[0] = formsum[0] + vals[0];
		{% endif %}

       }}} //end of loop over edges


//restore fields arrays and data
 {% for field in fieldlist %}
      {% for k in range(field.ncomp) %}
    ierr = DMDAVecRestoreArrayDOFRead(da_{{field.name}}_{{k}},{{field.name}}_{{k}},&data_{{field.name}}_{{k}});CHKERRQ(ierr);
      {% endfor %}
   {% endfor %}

 {% if formdim == 1 %}
//restore data in Vec v
		 {% for ci1 in range(space1.ncomp) %}
    ierr = DMDAVecRestoreArrayDOF(da_s1_{{ ci1 }},formvec_{{ ci1 }},&data_formvec_{{ ci1 }});CHKERRQ(ierr);
    		{% endfor %}
{% endif %}

  {% if formdim == 0 %}
return formsum[0];
{% endif %}

  PetscFunctionReturn(0);
}
