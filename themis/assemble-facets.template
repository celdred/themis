
//Key: we define 1 = - and 2 = +

{% if facet_direc == 0 %}
#define i1cell (i - 1) 
{% else %}
#define i1cell (i) 
{% endif %}
{% if facet_direc == 1 %}
#define j1cell (j - 1) 
{% else %}
#define j1cell (j) 
{% endif %}
{% if facet_direc == 2 %}
#define k1cell (k - 1) 
{% else %}
#define k1cell (k) 
{% endif %}

#define i2cell (i)
#define j2cell (j)
#define k2cell (k)

 {% if formdim >= 1 %}
 {% for ci in range(nci1) %}
#define s1_{{ci}}_indices [lz + {{  nbasis1_z[ci]  }} * (ly + {{ nbasis1_y[ci]  }} * lx)]
#define s1_{{ci}}_indices_n [nz + {{  nbasis1_z[ci]  }} * (ny + {{ nbasis1_y[ci]  }} * nx)]
#define s1_{{ci}}_indices_noff [ci1off + nz + {{  nbasis1_z[ci]  }} * (ny + {{ nbasis1_y[ci]  }} * nx)]
 {% endfor %}
 {% endif %}
 {% if formdim == 2 %}
 {% for ci in range(nci2) %}
#define s2_{{ci}}_indices [lz + {{  nbasis2_z[ci]  }} * (ly + {{ nbasis2_y[ci]  }} * lx)]
#define s2_{{ci}}_indices_m [mz + {{  nbasis2_z[ci]  }} * (my + {{ nbasis2_y[ci]  }} * mx)]
#define s2_{{ci}}_indices_moff [ci2off + mz + {{  nbasis2_z[ci]  }} * (my + {{ nbasis2_y[ci]  }} * mx)]
 {% endfor %}
{% endif %}


//Works because we have already unsplatted vals from kernel into vals1/vals2
{%macro SETVALS(ci,cell) -%}

{% if cell == 1 %}
 #define kk	(k1cell * offset_mult1_z_{{ ci }}[lz] + offsets1_z_{{ ci }}[lz])
 #define jj (j1cell * offset_mult1_y_{{ ci }}[ly] + offsets1_y_{{ ci }}[ly])
 #define ii (i1cell * offset_mult1_x_{{ ci }}[lx] + offsets1_x_{{ ci }}[lx])
 #define vals vals1_{{ ci }}
 {% endif %}
 {% if cell == 2 %}
 #define kk	(k2cell * offset_mult1_z_{{ ci }}[lz] + offsets1_z_{{ ci }}[lz])
 #define jj (j2cell * offset_mult1_y_{{ ci }}[ly] + offsets1_y_{{ ci }}[ly])
 #define ii (i2cell * offset_mult1_x_{{ ci }}[lx] + offsets1_x_{{ ci }}[lx])
  #define vals vals2_{{ ci }}
 {% endif %}
for (lx=0;lx<{{ nbasis1_x[ci] }};lx++) {
for (ly=0;ly<{{ nbasis1_y[ci] }};ly++) {
for (lz=0;lz<{{ nbasis1_z[ci] }};lz++) {
{% if ndim == 1 %}
data_formvec_{{ ci }}[ii] += vals s1_{{ci}}_indices;
{% endif %}
{% if ndim == 2 %}
data_formvec_{{ ci }}[jj][ii] += vals s1_{{ci}}_indices;
{% endif %}
{% if ndim == 3 %}
data_formvec_{{ ci }}[kk][jj][ii] += vals s1_{{ci}}_indices;
{% endif %}
}}}
#undef ii
#undef jj
#undef kk
#undef vals
{% endmacro %}

#include <petsc.h>
#include "math.h"
#include <stdio.h>

//Actual kernel snippet
		{{ kernelstr }}
		
 {% if formdim == 2 %}
PetscErrorCode assemble(DM da {{ submatlist }}  {{ s1dalist }}  {{ s2dalist }} {{ fieldargs }} {{ constantargs }})
{% endif %}
 {% if formdim == 1 %}
PetscErrorCode assemble(DM da {{ subveclist }} {{ s1dalist }} {{ fieldargs }} {{ constantargs }}) 
{% endif %}
 {% if formdim == 0 %}
PetscScalar assemble(DM da {{ fieldargs }} {{ constantargs }})
{% endif %}

{

 {% if formdim == 2 %}
 {% if facet_type == 'interior' %}
 PetscScalar vals[{{ nbasis1_total }} * 2][{{ nbasis2_total }} * 2] = { {0.,},}; 
 {% endif %}
 {% if facet_type == 'exterior' %}
 PetscScalar vals[{{ nbasis1_total }}][{{ nbasis2_total }}] = { {0.,},}; 
 {% endif %}

 {% for ci1 in range(nci1) %}
 {% for ci2 in range(nci2) %}
  PetscScalar	vals11_{{ ci1 }}_{{ ci2 }}[{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }}][{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }}] = { {0.,},};
  PetscScalar	vals12_{{ ci1 }}_{{ ci2 }}[{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }}][{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }}] = { {0.,},};
  PetscScalar	vals21_{{ ci1 }}_{{ ci2 }}[{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }}][{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }}] = { {0.,},};
  PetscScalar	vals22_{{ ci1 }}_{{ ci2 }}[{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }}][{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }}] = { {0.,},};
 {% endfor %}
 {% endfor %}
 
  {% for ci2 in range(nci2) %}
   PetscInt     cols1_{{ ci2 }}[{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2]  }} * {{ nbasis2_z[ci2]  }}];
   PetscInt     cols2_{{ ci2 }}[{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2]  }} * {{ nbasis2_z[ci2]  }}];
    {% endfor %}
    {% for ci1 in range(nci1) %}
   PetscInt     rows1_{{ ci1 }}[{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1]  }} * {{ nbasis1_z[ci1]  }}];
   PetscInt     rows2_{{ ci1 }}[{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1]  }} * {{ nbasis1_z[ci1]  }}];
 {% endfor %}
 {% endif %}
 
 {% if formdim == 1 %}
  {% if facet_type == 'interior' %}
 PetscScalar vals[{{ nbasis1_total }} * 2] = {0.,};
 {% endif %}
 {% if facet_type == 'exterior' %}
 PetscScalar vals[{{ nbasis1_total }}] = {0.,};
 {% endif %}

 {% for ci1 in range(nci1) %}
 PetscScalar	vals1_{{ ci1 }}[{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }}]= {0.,};
 PetscScalar	vals2_{{ ci1 }}[{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }}]= {0.,};
 {% if ndim == 1 %}
 PetscScalar *data_formvec_{{ ci1 }};
      {% endif %}
 {% if ndim == 2 %}
 PetscScalar **data_formvec_{{ ci1 }};
      {% endif %}
 {% if ndim == 3 %}
 PetscScalar ***data_formvec_{{ ci1 }};
      {% endif %}
  {% endfor %}
 {% endif %}
 
 {% if formdim == 0 %}
 PetscScalar	vals[1] = {0.0,};
 PetscScalar formsum[1] = {0.0,};
 {% endif %}

  PetscErrorCode ierr;
  PetscInt ci1off,ci2off,fieldoffset;
  PetscInt i,j,k; //spatial loop indices
   PetscInt lx,ly,lz; //rows/cols indices
   PetscInt nx,ny,nz;
   PetscInt mx,my,mz;
   PetscInt d; //dof index
  PetscInt xs,xm,ys,ym,zs,zm,xmax,ymax,zmax;
  PetscInt icoord,jcoord,kcoord;
   PetscInt upper_boundary = 0;
  PetscInt lower_boundary = 0;
   {% if formdim >= 1 %}
  {% for ci1 in range(nci1) %}
  PetscInt x1s_{{ ci1 }},x1m_{{ ci1 }},y1s_{{ ci1 }},y1m_{{ ci1 }},z1s_{{ ci1 }},z1m_{{ ci1 }};
    {% endfor %}
   {% endif %}
 {% if formdim == 2 %}
  {% for ci2 in range(nci2) %}
  PetscInt x2s_{{ ci2 }},x2m_{{ ci2 }},y2s_{{ ci2 }},y2m_{{ ci2 }},z2s_{{ ci2 }},z2m_{{ ci2 }};
   {% endfor %}
 {% endif %}

 {% if formdim == 2 %}
  {% for ci2 in range(nci2) %}
const   PetscInt offsets2_x_{{ ci2 }}[{{ nbasis2_x[ci2] }}] = {{ offsets2_x[ci2] }};
const   PetscInt offsets2_y_{{ ci2 }}[{{ nbasis2_y[ci2] }}] = {{ offsets2_y[ci2] }};
const   PetscInt offsets2_z_{{ ci2 }}[{{ nbasis2_z[ci2] }}] = {{ offsets2_z[ci2] }};
const   PetscInt offset_mult2_x_{{ ci2 }}[{{ nbasis2_x[ci2] }}] = {{ offset_mult2_x[ci2] }};
const   PetscInt offset_mult2_y_{{ ci2 }}[{{ nbasis2_y[ci2] }}] = {{ offset_mult2_y[ci2] }};
const   PetscInt offset_mult2_z_{{ ci2 }}[{{ nbasis2_z[ci2] }}] = {{ offset_mult2_z[ci2] }};
  {% endfor %}
  {% endif %}
 {% if formdim >= 1 %}
 {% for ci1 in range(nci1) %}
const   PetscInt offsets1_x_{{ ci1 }}[{{ nbasis1_x[ci1] }}] = {{ offsets1_x[ci1] }};
const   PetscInt offsets1_y_{{ ci1 }}[{{ nbasis1_y[ci1] }}] = {{ offsets1_y[ci1] }};
const   PetscInt offsets1_z_{{ ci1 }}[{{ nbasis1_z[ci1] }}] = {{ offsets1_z[ci1] }};
const   PetscInt offset_mult1_x_{{ ci1 }}[{{ nbasis1_x[ci1] }}] = {{ offset_mult1_x[ci1] }};
const   PetscInt offset_mult1_y_{{ ci1 }}[{{ nbasis1_y[ci1] }}] = {{ offset_mult1_y[ci1] }};
const   PetscInt offset_mult1_z_{{ ci1 }}[{{ nbasis1_z[ci1] }}] = {{ offset_mult1_z[ci1] }};
  {% endfor %}
  {% endif %}

 {% for field in fieldlist %}
 PetscScalar	{{field.name}}_vals[{{ field.nbasis_total }} * 2][{{ field.ndofs }}] = { { 0.,},};
 {% for k in range(field.ncomp) %}
const   PetscInt {{field.name}}_{{k}}_offsets_x[{{ field.nbasis_x[k] }}] = {{ field.offsets_x[k] }};
const   PetscInt {{field.name}}_{{k}}_offsets_y[{{ field.nbasis_y[k] }}] = {{ field.offsets_y[k] }};
const   PetscInt {{field.name}}_{{k}}_offsets_z[{{ field.nbasis_z[k] }}] = {{ field.offsets_z[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_x[{{ field.nbasis_x[k] }}] = {{ field.offset_mult_x[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_y[{{ field.nbasis_y[k] }}] = {{ field.offset_mult_y[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_z[{{ field.nbasis_z[k] }}] = {{ field.offset_mult_z[k] }};

#define {{field.name}}_{{k}}_indices [fieldoffset + lz + {{  field.nbasis_z[k]  }} * (ly + {{ field.nbasis_y[k]  }} * lx)][d]

 {% if ndim == 1 %}
  PetscScalar **data_{{field.name}}_{{k}};
      {% endif %}
 {% if ndim == 2 %}
  PetscScalar ***data_{{field.name}}_{{k}};
      {% endif %}
 {% if ndim == 3 %}
  PetscScalar ****data_{{field.name}}_{{k}};
      {% endif %}
    {% endfor %}
  {% endfor %}

 {% for tabulation in tabulations %}
 const   PetscScalar {{ tabulation.name }}[{{ tabulation.npts }}][{{ tabulation.nbasis }}] = {{ tabulation.values }};
 {% endfor %}
 
	//*************************************//	

	//get DMDA ranges
   {% if formdim >= 1 %}
       {% for ci1 in range(nci1) %}
  ierr = DMDAGetGhostCorners(s1da_{{ ci1 }},&x1s_{{ ci1 }},&y1s_{{ ci1 }},&z1s_{{ ci1 }},&x1m_{{ ci1 }},&y1m_{{ ci1 }},&z1m_{{ ci1 }});CHKERRQ(ierr);
      {% endfor %}
    {% endif %}
    {% if formdim >= 2 %}   
         {% for ci2 in range(nci2) %}
  ierr = DMDAGetGhostCorners(s2da_{{ ci2 }},&x2s_{{ ci2 }},&y2s_{{ ci2 }},&z2s_{{ ci2 }},&x2m_{{ ci2 }},&y2m_{{ ci2 }},&z2m_{{ ci2 }});CHKERRQ(ierr);
       {% endfor %}
      {% endif %}
  ierr = DMDAGetCorners(da,&xs,&ys,&zs,&xm,&ym,&zm);CHKERRQ(ierr);
  ierr = DMDAGetInfo(da,0,&xmax,&ymax,&zmax,0,0,0,0,0,0,0,0,0);CHKERRQ(ierr);
  
//printf("%i %i %i : %i %i %i\n",xs,xm,xmax,ys,ym,ymax);

//determine if we own the upper/lower boundary
{% if facet_direc == 0 %}
if (xs == 0) { //if owned 
lower_boundary = 1;
}
if (xs+xm == xmax) { //if owned
upper_boundary = 1;
}
{% endif %}
{% if facet_direc == 1 %}
if (ys == 0) { //if owned 
lower_boundary = 1;
}
if (ys+ym == ymax) { //if owned 
upper_boundary = 1;
}
{% endif %}
{% if facet_direc == 2 %}
if (zs == 0) { //if owned 
lower_boundary = 1;
}
if (zs+zm == zmax) { //if owned
upper_boundary = 1;
}
{% endif %}

//if exterior facet, check that this process actually owns any part of the relevant boundary!
{% if facet_type == 'exterior' %}
{% if facet_exterior_boundary == 'upper' %}
if (upper_boundary == 0) PetscFunctionReturn(0);
{% endif %}
{% if facet_exterior_boundary == 'lower' %}
if (lower_boundary == 0) PetscFunctionReturn(0);
{% endif %}
{% endif %}

	//*************************************//		
//get field data
 {% for field in fieldlist %}
      {% for k in range(field.ncomp) %}
  ierr = DMDAVecGetArrayDOFRead(da_{{field.name}}_{{k}},{{field.name}}_{{k}},&data_{{field.name}}_{{k}});CHKERRQ(ierr);
      {% endfor %}
  {% endfor %}
  
  //Get the data out of Vec formvec
    {% if formdim == 1 %}
     {% for ci1 in range(nci1) %}
    ierr = DMDAVecGetArray(s1da_{{ ci1 }},formvec_{{ ci1 }},&data_formvec_{{ ci1 }});CHKERRQ(ierr);
      {% endfor %}
    {% endif %}
	//*************************************//		

 //here i/j/k represent the EDGE indices, and i1/i2. are the left/right CELLS associated with that edge
//in parallel just need to be careful with loop bounds in "active" dimension
//for periodic interior, everything is fine

//for non-periodic interior need to skip the first and last edges
//therefore we must adjust the loop bounds by adding 1 IFF we own the lower boundary
//We and also subtract 1 from xm if we own the upper boundary AND if we own the lower boundary!


{% if facet_type == 'interior' %}
{% if facet_direc == 0 %}
{% if (bcs[0] == 'nonperiodic') %}
if (lower_boundary == 1) xs = xs+1;
xm = xm - upper_boundary - lower_boundary;
{% endif %}
{% endif %}
{% if facet_direc == 1 %}
{% if (bcs[1] == 'nonperiodic') %}
if (lower_boundary == 1) ys = ys+1;
ym = ym - upper_boundary - lower_boundary;
{% endif %}
{% endif %}
{% if facet_direc == 2 %}
{% if (bcs[2] == 'nonperiodic') %}
if (lower_boundary == 1) zs = zs+1;
zm = zm - upper_boundary - lower_boundary;
{% endif %}
{% endif %}
{% endif %}


//for non-periodic exterior do the upper/lower boundary IFF they are owned
//lower boundary (set xm=1)
//upper boundary (set xs=xs+xm-1)
 
{% if facet_type == 'exterior' %}
{% if facet_exterior_boundary == 'lower' %}
{% if facet_direc == 0 %}
if (lower_boundary == 1) xm = 1;
{% endif %}
{% if facet_direc == 1 %}
if (lower_boundary == 1) ym = 1;
{% endif %}
{% if facet_direc == 2 %}
if (lower_boundary == 1) zm = 1;
{% endif %}
{% endif %}

{% if facet_exterior_boundary == 'upper' %}
{% if facet_direc == 0 %}
if (upper_boundary == 1) xs = xs+xm-1; xm = 1;
{% endif %}
{% if facet_direc == 1 %}
if (upper_boundary == 1) ys = ys+ym-1; ym = 1;
{% endif %}
{% if facet_direc == 2 %}
if (upper_boundary == 1) zs = zs+zm-1; zm = 1;
{% endif %}
{% endif %}

{% endif %}

	//*************************************//		

//set facet number

{% if facet_type == 'exterior' %}
	{% if facet_exterior_boundary == 'lower' and facet_direc == 0 %}
	const unsigned int facet_number[1] = {0,};
	{% endif %}
	{% if facet_exterior_boundary == 'upper' and facet_direc == 0 %}
	const unsigned int facet_number[1] = {1,};
	{% endif %}
	{% if facet_exterior_boundary == 'lower' and facet_direc == 1 %}
	const unsigned int facet_number[1] = {2,};
	{% endif %}
	{% if facet_exterior_boundary == 'upper' and facet_direc == 1 %}
	const unsigned int facet_number[1] = {3,};
	{% endif %}
	{% if facet_exterior_boundary == 'lower' and facet_direc == 2 %}
	const unsigned int facet_number[1] = {4,};
	{% endif %}
	{% if facet_exterior_boundary == 'upper' and facet_direc == 2 %}
	const unsigned int facet_number[1] = {5,};
	{% endif %}	
{% endif %}

{% if facet_type == 'interior' %}
	{% if facet_direc == 0 %}
	const unsigned int facet_number[2] = {0,1};
	{% endif %}
	{% if facet_direc == 1 %}
	const unsigned int facet_number[2] = {2,3};
	{% endif %}
	{% if facet_direc == 2 %}
	const unsigned int facet_number[2] = {4,5};
	{% endif %}
{% endif %}

//printf(" {{ facet_type }} %i\n",{{ facet_direc }});
//printf(" {{ bcs[0] }} {{ bcs[1] }} {{ facet_exterior_boundary }} \n");
//printf("%i %i %i %i : %i %i\n",xs,xm,ys,ym,lower_boundary,upper_boundary);
//printf("{{ kernelstr == '' }} \n");


//loop over edges
for (k=zs; k<zs+zm; k++) {
   for (j=ys; j<ys+ym; j++) {
      for (i=xs; i<xs+xm; i++) {
		
			//*************************************//		
		//printf("%i %i %i\n",i,j,k);
		//compute rows and cols

		 {% if formdim == 2 %}
	{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}
		 //1
       {% for ci1 in range(nci1) %}
		for (lx=0;lx<{{ nbasis1_x[ci1] }};lx++) {
		for (ly=0;ly<{{ nbasis1_y[ci1] }};ly++) {
		for (lz=0;lz<{{ nbasis1_z[ci1] }};lz++) {
			icoord = i1cell * offset_mult1_x_{{ ci1 }}[lx] + offsets1_x_{{ ci1 }}[lx] - x1s_{{ ci1 }};
			jcoord = j1cell * offset_mult1_y_{{ ci1 }}[ly] + offsets1_y_{{ ci1 }}[ly] - y1s_{{ ci1 }};
			kcoord = k1cell * offset_mult1_z_{{ ci1 }}[lz] + offsets1_z_{{ ci1 }}[lz] - z1s_{{ ci1 }};
			rows1_{{ ci1 }} s1_{{ci1}}_indices =  icoord + x1m_{{ ci1 }}*(jcoord + y1m_{{ ci1 }}*kcoord);
		}}}
      {% endfor %}

       {% for ci2 in range(nci2) %}
		for (lx=0;lx<{{ nbasis2_x[ci2] }};lx++) {
		for (ly=0;ly<{{ nbasis2_y[ci2] }};ly++) {
		for (lz=0;lz<{{ nbasis2_z[ci2] }};lz++) {
			icoord = i1cell * offset_mult2_x_{{ ci2 }}[lx] + offsets2_x_{{ ci2 }}[lx] - x2s_{{ ci2 }};
			jcoord = j1cell * offset_mult2_y_{{ ci2 }}[ly] + offsets2_y_{{ ci2 }}[ly] - y2s_{{ ci2 }};
			kcoord = k1cell * offset_mult2_z_{{ ci2 }}[lz] + offsets2_z_{{ ci2 }}[lz] - z2s_{{ ci2 }};
			cols1_{{ ci2 }} s2_{{ci2}}_indices =  icoord + x2m_{{ ci2 }}*(jcoord + y2m_{{ ci2 }}*kcoord);
		}}}
	 {% endfor %}
		{% endif %}
		
		{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}
		//2
       {% for ci1 in range(nci1) %}
		for (lx=0;lx<{{ nbasis1_x[ci1] }};lx++) {
		for (ly=0;ly<{{ nbasis1_y[ci1] }};ly++) {
		for (lz=0;lz<{{ nbasis1_z[ci1] }};lz++) {
			icoord = i2cell * offset_mult1_x_{{ ci1 }}[lx] + offsets1_x_{{ ci1 }}[lx] - x1s_{{ ci1 }};
			jcoord = j2cell * offset_mult1_y_{{ ci1 }}[ly] + offsets1_y_{{ ci1 }}[ly] - y1s_{{ ci1 }};
			kcoord = k2cell * offset_mult1_z_{{ ci1 }}[lz] + offsets1_z_{{ ci1 }}[lz] - z1s_{{ ci1 }};
			rows2_{{ ci1 }} s1_{{ci1}}_indices =  icoord + x1m_{{ ci1 }}*(jcoord + y1m_{{ ci1 }}*kcoord);
		}}}
      {% endfor %}

       {% for ci2 in range(nci2) %}
		for (lx=0;lx<{{ nbasis2_x[ci2] }};lx++) {
		for (ly=0;ly<{{ nbasis2_y[ci2] }};ly++) {
		for (lz=0;lz<{{ nbasis2_z[ci2] }};lz++) {
			icoord = i2cell * offset_mult2_x_{{ ci2 }}[lx] + offsets2_x_{{ ci2 }}[lx] - x2s_{{ ci2 }};
			jcoord = j2cell * offset_mult2_y_{{ ci2 }}[ly] + offsets2_y_{{ ci2 }}[ly] - y2s_{{ ci2 }};
			kcoord = k2cell * offset_mult2_z_{{ ci2 }}[lz] + offsets2_z_{{ ci2 }}[lz] - z2s_{{ ci2 }};
			cols2_{{ ci2 }} s2_{{ci2}}_indices =  icoord + x2m_{{ ci2 }}*(jcoord + y2m_{{ ci2 }}*kcoord);
		}}}
	 {% endfor %}
		{% endif %}


		{% endif %}
		

			//*************************************//		

		//extract element dofs from local dofs
				
		 {% for field in fieldlist %}

		 		fieldoffset = 0;
		 //For interior facet this is organized as + (2) followed by - (1)
		 {% if facet_type == 'interior' %}
		 {% set ijklist = [('i2cell','j2cell','k2cell'),('i1cell','j1cell','k1cell'),]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'upper' %}
		 {% set ijklist = [('i1cell','j1cell','k1cell'),]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'lower' %}
		 {% set ijklist = [('i2cell','j2cell','k2cell'),]%}
		 {% endif %}
		 
		 //printf("starting field {{ field.name }} extraction\n");
		
		 {% for i,j,k in ijklist %}
		 #define ic {{ i }}
		 #define jc {{ j }}
		 #define kc {{ k }}

		//printf("%i %i %i\n", ic,jc,kc);
		//asdf
		{% for k in range(field.ncomp) %}
		{%set offset_mult = field.name~'_'~k ~'_offset_mult' %}
		{%set offset = field.name~'_'~k ~'_offsets' %}
		#define ii (ic*{{ offset_mult }}_x[lx] + {{ offset }}_x[lx]) 
		#define jj (jc*{{ offset_mult }}_y[ly] + {{ offset }}_y[ly]) 
		#define kk (kc*{{ offset_mult }}_z[lz] + {{ offset }}_z[lz]) 
		for (lx=0;lx<{{ field.nbasis_x[k] }};lx++){
		for (ly=0;ly<{{ field.nbasis_y[k] }};ly++){
		for (lz=0;lz<{{ field.nbasis_z[k] }};lz++){
		for (d=0;d<{{ field.ndofs }};d++){
		{% if ndim == 1 %}
		//printf("%i %i %i %i : %i\n",lx,ly,lz,d,ii);
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [ii][d];
		{% endif %}
		{% if ndim == 2 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [jj][ii][d];
		{% endif %}
		{% if ndim == 3 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [kk][jj][ii][d];
		{% endif %}
		}}}}
		#undef ii
		#undef jj
		#undef kk	
		fieldoffset = fieldoffset + {{ field.nbasis_x[k] }} * {{ field.nbasis_y[k] }} * {{ field.nbasis_z[k] }};
		{% endfor %}

		#undef ic
		#undef jc
		#undef kc	
		{% endfor %}

		//printf("field {{ field.name }} extracted\n");

		{% endfor %}
		
			//*************************************//		

		//compute the element tensor
		{% if not kernelstr == '' %}
		
		    {% if formdim == 2 %}
			 {% if facet_type == 'interior' %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ nbasis1_total }} * 2][{{ nbasis2_total }} * 2])); CHKERRQ(ierr);
					{% endif %}
	 {% if facet_type == 'exterior' %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ nbasis1_total }}][{{ nbasis2_total }}])); CHKERRQ(ierr);
				{% endif %}
				{% endif %}
		    {% if formdim == 1 %}

			 {% if facet_type == 'interior' %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ nbasis1_total }} * 2])); CHKERRQ(ierr);
					{% endif %}
	 {% if facet_type == 'exterior' %}
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ nbasis1_total }}])); CHKERRQ(ierr);
					{% endif %}
				{% endif %}
		    {% if formdim == 0 %}
		    vals[0] = 0.0;
				{% endif %}
                
    //extruded doesn't need a facet number
  	 {% if extruded == 1 %}
		{{kernelname}}(vals
				 {% for field in fieldplusconstantslist %}
				 ,{{field}}
				 				{% endfor %}
				 {% for tabulation in tabulations %}
				 ,{{tabulation.name}}
				{% endfor %}
			);
    {% endif %}

    //non-extruded needs a facet number
  	 {% if extruded == 0 %}
		{{kernelname}}(vals
				 {% for field in fieldplusconstantslist %}
				 ,{{field}}
				 				{% endfor %}
				 ,facet_number
				 {% for tabulation in tabulations %}
				 ,{{tabulation.name}}
				{% endfor %}
			);
    {% endif %}
	//*************************************//		
			//unsplat vals

		//for interior facet this is all 4 vals (2 for 1-forms)
		//for exterior facet this is just 1 set of vals
		
		//printf('unpsplatting \n');

	 {% if formdim == 2 %}

		 {% if facet_type == 'interior' %}
		 {% set celllist1 = [(2,0),(1,nbasis1_total)]%}
		 {% set celllist2 = [(2,0),(1,nbasis2_total)]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'upper' %}
		 {% set celllist1 = [(1,0),]%}
		 {% set celllist2 = [(1,0),]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'lower' %}
		 {% set celllist1 = [(2,0),]%}
		 {% set celllist2 = [(2,0),]%}
		 {% endif %}
		 
	{% for cell1,offset1 in celllist1 %}
	{% for cell2,offset2 in celllist2 %}
	   ci1off = {{ offset1 }};
       {% for ci1 in range(nci1) %}
       ci2off = {{ offset2 }};
       {% for ci2 in range(nci2) %}
        for (nx=0;nx<{{ nbasis1_x[ci1] }};nx++) {
		for (ny=0;ny<{{ nbasis1_y[ci1] }};ny++) {
		for (nz=0;nz<{{ nbasis1_z[ci1] }};nz++) {		
		for (mx=0;mx<{{ nbasis2_x[ci2] }};mx++) {
		for (my=0;my<{{ nbasis2_y[ci2] }};my++) {
		for (mz=0;mz<{{ nbasis2_z[ci2] }};mz++) {
       vals{{ cell1 }}{{ cell2 }}_{{ ci1 }}_{{ ci2 }} s1_{{ci1}}_indices_n s2_{{ci2}}_indices_m = vals s1_{{ci1}}_indices_noff s2_{{ci2}}_indices_moff;
   }}}}}}
   ci2off = ci2off + {{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }};
				{% endfor %}
			ci1off = ci1off + {{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }};
				{% endfor %}
				{% endfor %}
				{% endfor %}

				{% endif %}
				
				
				
					    {% if formdim == 1 %}

		 {% if facet_type == 'interior' %}
		 {% set celllist1 = [(2,0),(1,nbasis1_total)]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'upper' %}
		 {% set celllist1 = [(1,0),]%}
		 {% endif %}
		 {% if facet_type == 'exterior' and facet_exterior_boundary == 'lower' %}
		 {% set celllist1 = [(2,0),]%}
		 {% endif %}
		 
	{% for cell1,offset1 in celllist1 %}

			ci1off = {{ offset1 }};
		       {% for ci1 in range(nci1) %}
        for (nx=0;nx<{{ nbasis1_x[ci1] }};nx++) {
		for (ny=0;ny<{{ nbasis1_y[ci1] }};ny++) {
		for (nz=0;nz<{{ nbasis1_z[ci1] }};nz++) {
			vals{{ cell1 }}_{{ ci1 }} s1_{{ci1}}_indices_n = vals s1_{{ci1}}_indices_noff;
		}}}
						ci1off = ci1off + {{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }};
				{% endfor %}
						{% endfor %}
		{% endif %}
				{% endif %} //closes the whole kernel + unplat if

			//*************************************//		

		//Put the element tensor into the local tensor
{% if formdim == 2 %}
		{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}        
		       {% for ci1 in range(nci1) %}
       {% for ci2 in range(nci2) %}
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }},rows1_{{ ci1 }},{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }},cols1_{{ ci2 }},*vals11_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
			 {% endfor %}
	 {% endfor %}
		{% endif %}

		{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}        
		       {% for ci1 in range(nci1) %}
       {% for ci2 in range(nci2) %}
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }},rows2_{{ ci1 }},{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }},cols2_{{ ci2 }},*vals22_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
			 {% endfor %}
	 {% endfor %}
		{% endif %}

		{% if facet_type == 'interior' %}        
		       {% for ci1 in range(nci1) %}
       {% for ci2 in range(nci2) %}
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }},rows1_{{ ci1 }},{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }},cols2_{{ ci2 }},*vals12_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
        ierr = MatSetValuesLocal(formmat_{{ ci1 }}_{{ ci2 }},{{ nbasis1_x[ci1] }} * {{ nbasis1_y[ci1] }} * {{ nbasis1_z[ci1] }},rows2_{{ ci1 }},{{ nbasis2_x[ci2] }} * {{ nbasis2_y[ci2] }} * {{ nbasis2_z[ci2] }},cols1_{{ ci2 }},*vals21_{{ ci1 }}_{{ ci2 }},ADD_VALUES);CHKERRQ(ierr);
			 {% endfor %}
	 {% endfor %}
		{% endif %}

		{% endif %}
		
		
		//printf("setting vals\n");
		{% if formdim == 1 %}
		{% if facet_type == 'interior' or facet_exterior_boundary == 'upper' %}        
		 {% for ci1 in range(nci1) %}
		{{ SETVALS(ci1,1) }}
		{% endfor %}
		{% endif %}
		{% if facet_type == 'interior' or facet_exterior_boundary == 'lower' %}        
		 {% for ci1 in range(nci1) %}
		{{ SETVALS(ci1,2) }}
		{% endfor %}
		{% endif %}
		{% endif %}
		
		{% if formdim == 0 %}
		formsum[0] = formsum[0] + vals[0];
		{% endif %}
		
       }}} //end of loop over edges

	//*************************************//		

//restore fields arrays and data
 {% for field in fieldlist %}
      {% for k in range(field.ncomp) %}
    ierr = DMDAVecRestoreArrayDOFRead(da_{{field.name}}_{{k}},{{field.name}}_{{k}},&data_{{field.name}}_{{k}});CHKERRQ(ierr);
      {% endfor %}
   {% endfor %}

 {% if formdim == 1 %}
//restore data in Vec v
		 {% for ci1 in range(nci1) %}
    ierr = DMDAVecRestoreArray(s1da_{{ ci1 }},formvec_{{ ci1 }},&data_formvec_{{ ci1 }});CHKERRQ(ierr);
    		{% endfor %}
{% endif %}
 
  {% if formdim == 0 %}
return formsum[0];
{% endif %}

  PetscFunctionReturn(0);
}
