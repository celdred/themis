
#include <petsc.h>
#include "math.h"
#include <stdio.h>

//Actual kernel snippet
		{{ kernelstr }}
		
PetscScalar assemble(DM da, DM sda, Vec formvec {{ fieldargs }} {{ constantargs }})
{


 PetscScalar vals[{{ nentries_total }}][{{ ndofs }}] = { {0.,},};

 {% if ndim == 1 %}
 PetscScalar **data_formvec;
      {% endif %}
 {% if ndim == 2 %}
 PetscScalar ***data_formvec;
      {% endif %}
 {% if ndim == 3 %}
 PetscScalar ****data_formvec;
      {% endif %}


  PetscErrorCode ierr;
  PetscInt i,j,k; //spatial loop indices
   PetscInt lx,ly,lz; //rows/cols indices
   PetscInt d; //dof index
  PetscInt xs,xm,ys,ym,zs,zm,xmax,ymax,zmax;
  // PetscInt x1s,x1m,y1s,y1m,z1s,z1m;

const   PetscInt offsets_x[{{ nentries_x }}] = {{ offsets_x }};
const   PetscInt offsets_y[{{ nentries_y }}] = {{ offsets_y }};
const   PetscInt offsets_z[{{ nentries_z }}] = {{ offsets_z }};
const   PetscInt offset_mult_x[{{ nentries_x }}] = {{ offset_mult_x }};
const   PetscInt offset_mult_y[{{ nentries_y }}] = {{ offset_mult_y }};
const   PetscInt offset_mult_z[{{ nentries_z }}] = {{ offset_mult_z }};

 {% for field in fieldlist %}
 PetscScalar	{{field.name}}_vals[{{ field.nbasis_total }}][{{ field.ndofs }}] = { { 0.,},};
   PetscInt {{field.name}}_offset;

 {% for k in range(field.ncomp) %}
const   PetscInt {{field.name}}_{{k}}_offsets_x[{{ field.nblocks_x[k] }}][{{ field.nbasis_x[k] }}] = {{ field.offsets_x[k] }};
const   PetscInt {{field.name}}_{{k}}_offsets_y[{{ field.nblocks_y[k] }}][{{ field.nbasis_y[k] }}] = {{ field.offsets_y[k] }};
const   PetscInt {{field.name}}_{{k}}_offsets_z[{{ field.nblocks_z[k] }}][{{ field.nbasis_z[k] }}] = {{ field.offsets_z[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_x[{{ field.nblocks_x[k] }}][{{ field.nbasis_x[k] }}] = {{ field.offset_mult_x[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_y[{{ field.nblocks_y[k] }}][{{ field.nbasis_y[k] }}] = {{ field.offset_mult_y[k] }};
const   PetscInt {{field.name}}_{{k}}_offset_mult_z[{{ field.nblocks_z[k] }}][{{ field.nbasis_z[k] }}] = {{ field.offset_mult_z[k] }};
   PetscInt bi_{{field.name}}_x_{{k}} = -1000;
   PetscInt bi_{{field.name}}_y_{{k}} = -1000;
   PetscInt bi_{{field.name}}_z_{{k}} = -1000;

#define {{field.name}}_{{k}}_indices [{{field.name}}_offset + lz + {{  field.nbasis_z[k]  }} * (ly + {{ field.nbasis_y[k]  }} * lx)][d]

 {% if ndim == 1 %}
  PetscScalar **data_{{field.name}}_{{k}};
      {% endif %}
 {% if ndim == 2 %}
  PetscScalar ***data_{{field.name}}_{{k}};
      {% endif %}
 {% if ndim == 3 %}
  PetscScalar ****data_{{field.name}}_{{k}};
      {% endif %}
    {% endfor %}
  {% endfor %}
 
 {% for tabulation in tabulations %}
 const   PetscScalar {{ tabulation.name }}[{{ tabulation.nblocks }}][{{ tabulation.npts }}][{{ tabulation.nbasis }}] = {{ tabulation.values }};
 {% if tabulation.shiftaxis == 0 %}
 PetscInt bi_{{ tabulation.name }}_x_0 = -1000;
     {% endif %}
 {% if tabulation.shiftaxis == 1 %}
 PetscInt bi_{{ tabulation.name }}_y_0 = -1000;
     {% endif %}
      {% if tabulation.shiftaxis == 2 %}
 PetscInt bi_{{ tabulation.name }}_z_0 = -1000;
     {% endif %}
 {% endfor %}

 {% for field in fieldlist %}
      {% for k in range(field.ncomp) %}
  ierr = DMDAVecGetArrayDOFRead(da_{{field.name}}_{{k}},{{field.name}}_{{k}},&data_{{field.name}}_{{k}});CHKERRQ(ierr);
      {% endfor %}
  {% endfor %}
  
  //Get the data out of Vec formvec
    ierr = DMDAVecGetArrayDOF(sda,formvec,&data_formvec);CHKERRQ(ierr);

	//get DMDA ranges
  // ierr = DMDAGetGhostCorners(sda,&x1s,&y1s,&z1s,&x1m,&y1m,&z1m);CHKERRQ(ierr);
  ierr = DMDAGetCorners(da,&xs,&ys,&zs,&xm,&ym,&zm);CHKERRQ(ierr);
   ierr = DMDAGetInfo(da,0,&xmax,&ymax,&zmax,0,0,0,0,0,0,0,0,0);CHKERRQ(ierr);

// set entriesoffset
PetscInt entriesoffsetx = 0;
PetscInt entriesoffsety = 0;
PetscInt entriesoffsetz = 0;
 {% if contx == 'H1' %}
if (xs+xm != xmax) entriesoffsetx = 1;
      {% endif %}
 {% if conty == 'H1' %}
if (ys+ym != ymax) entriesoffsety = 1;
      {% endif %}
 {% if contz == 'H1' %}
if (zs+zm != zmax) entriesoffsetz = 1;
      {% endif %}

 {% from 'setblocks.template' import SET_PERIODIC_TABULATIONS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_X_TABULATIONS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Y_TABULATIONS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Z_TABULATIONS with context %}
 {% from 'setblocks.template' import SET_PERIODIC_FIELDS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_X_FIELDS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Y_FIELDS with context %}
 {% from 'setblocks.template' import SET_NONPERIODIC_Z_FIELDS with context %}


{{ SET_PERIODIC_TABULATIONS() }}
{{ SET_PERIODIC_FIELDS() }}
for (k=zs; k<zs+zm; k++) {
{{ SET_NONPERIODIC_Z_TABULATIONS() }}
{{ SET_NONPERIODIC_Z_FIELDS() }}
   for (j=ys; j<ys+ym; j++) {
     {{ SET_NONPERIODIC_Y_TABULATIONS() }}
     {{ SET_NONPERIODIC_Y_FIELDS() }}
      for (i=xs; i<xs+xm; i++) {
	      {{ SET_NONPERIODIC_X_TABULATIONS() }}
	      {{ SET_NONPERIODIC_X_FIELDS() }}
	    
		//extract element dofs from local dofs
		 {% for field in fieldlist %}
		 		{{field.name}}_offset = 0;
		{% for k in range(field.ncomp) %}
		{%set offset_mult = field.name~'_'~k ~'_offset_mult' %}
		{%set offset = field.name~'_'~k ~'_offsets' %}
		#define ii (i*{{ offset_mult }}_x[bi_{{field.name}}_x_{{k}}][lx] + {{ offset }}_x[bi_{{field.name}}_x_{{k}}][lx]) 
		#define jj (j*{{ offset_mult }}_y[bi_{{field.name}}_y_{{k}}][ly] + {{ offset }}_y[bi_{{field.name}}_y_{{k}}][ly]) 
		#define kk (k*{{ offset_mult }}_z[bi_{{field.name}}_z_{{k}}][lz] + {{ offset }}_z[bi_{{field.name}}_z_{{k}}][lz]) 
		for (lx=0;lx<{{ field.nbasis_x[k] }};lx++){
		for (ly=0;ly<{{ field.nbasis_y[k] }};ly++){
		for (lz=0;lz<{{ field.nbasis_z[k] }};lz++){
		for (d=0;d<{{ field.ndofs }};d++){
		{% if ndim == 1 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [ii][d];
		{% endif %}
		{% if ndim == 2 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [jj][ii][d];
		{% endif %}
		{% if ndim == 3 %}
		{{field.name}}_vals {{field.name}}_{{k}}_indices = data_{{field.name}}_{{k}} [kk][jj][ii][d];
		{% endif %}
		}}}}
		#undef ii
		#undef jj
		#undef kk
		{{field.name}}_offset = {{field.name}}_offset + {{ field.nbasis_x[k] }} * {{ field.nbasis_y[k] }} * {{ field.nbasis_z[k] }};
		{% endfor %}
		{% endfor %}
		

		//compute the interpolation at points
	ierr = PetscMemzero(vals,sizeof(PetscScalar[{{ nentries_total }}][{{ ndofs }}])); CHKERRQ(ierr);

				{% if not kernelstr == '' %}
		{{kernelname}}(vals
				 {% for field in fieldplusconstantslist %}
				 ,{{field}}
				{% endfor %}
				 {% for tabulation in tabulations %}
				  {% if tabulation.shiftaxis == 0 %}
				 ,{{tabulation.name}}[bi_{{ tabulation.name }}_x_0]
			      	{% endif %}
				  {% if tabulation.shiftaxis == 1 %}
				 ,{{tabulation.name}}[bi_{{ tabulation.name }}_y_0]
			      	{% endif %}
				  {% if tabulation.shiftaxis == 2 %}
				 ,{{tabulation.name}}[bi_{{ tabulation.name }}_z_0]
			      	{% endif %}
				{% endfor %}
			);
			  				{% endif %}

		//set the values
#define kk (k * offset_mult_z[lz] + offsets_z[lz])
#define jj (j * offset_mult_y[ly] + offsets_y[ly])
#define ii (i * offset_mult_x[lx] + offsets_x[lx])
for (lx=0;lx<{{ nentries_x }}-entriesoffsetx;lx++) {
for (ly=0;ly<{{ nentries_y }}-entriesoffsety;ly++) {
for (lz=0;lz<{{ nentries_z }}-entriesoffsetz;lz++) {
for (d=0;d<{{ ndofs }};d++) {
{% if ndim == 1 %}
data_formvec[ii][d] = vals [lz + {{  nentries_z  }} * (ly + {{ nentries_y  }} * lx)][d];
{% endif %}
{% if ndim == 2 %}
data_formvec[jj][ii][d] = vals [lz + {{  nentries_z  }} * (ly + {{ nentries_y  }} * lx)][d];
{% endif %}
{% if ndim == 3 %}
data_formvec[kk][jj][ii][d] = vals [lz + {{  nentries_z  }} * (ly + {{ nentries_y  }} * lx)][d];
{% endif %}
}}}}
		#undef ii
		#undef jj
		#undef kk
				
       }}}

//restore fields arrays and data
 {% for field in fieldlist %}
      {% for k in range(field.ncomp) %}
    ierr = DMDAVecRestoreArrayDOFRead(da_{{field.name}}_{{k}},{{field.name}}_{{k}},&data_{{field.name}}_{{k}});CHKERRQ(ierr);
      {% endfor %}
   {% endfor %}
  
//restore data in Vec formvec
    ierr = DMDAVecRestoreArrayDOF(sda,formvec,&data_formvec);CHKERRQ(ierr);

  PetscFunctionReturn(0);
}
